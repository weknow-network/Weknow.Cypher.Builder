<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.Cypher.Builder</name>
    </assembly>
    <members>
        <member name="T:Weknow.Cypher.Builder.CypherAttribute">
            <summary>
            Cypher Attribute used to specify formatting pattern
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherAttribute.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.Cypher">
            <summary>
            Entry point for constructing root level Cypher.
            For fluent cypher check <see cref="T:Weknow.Cypher.Builder.CypherPhraseExtensions" />
            </summary>
            <summary>
            Entry point for constructing root level Cypher.
            For fluent cypher check <see cref="T:Weknow.Cypher.Builder.CypherPhraseExtensions" />
            </summary>
            <summary>
            Entry point for constructing root level Cypher.
            For fluent cypher check <see cref="T:Weknow.Cypher.Builder.CypherPhraseExtensions" />
            </summary>
            <summary>
            Cypher Function Extensions
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Init(Weknow.CypherConfig,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a builder.
            </summary>
            <param name="cfg">The CFG.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.NoVariable},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.Fluent},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.ILabel)">
            <summary>
            Specified node with label.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Specified node with variable.
            </summary>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.ILabel)">
            <summary>
            Specified node with variable and label.
            </summary>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.ILabel,System.Object)">
            <summary>
            Specified node with variable, label and properties.
            </summary>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.Cypher.R">
            <summary>
            Gets the Cypher relation.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._``1(Weknow.Cypher.Builder.Declarations.VariableDeclaration,``0)">
            <summary>
            Used to define properties' variables without the $ prefix.
            Useful for cases like UNWIND
            </summary>
            <param name="var">The variable.</param>
            <param name="exp">Any generics expression</param>
            <returns></returns>
            <example>
            UNWIND $items AS item 
                MATCH(n:Person { PropA: item.x })
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._deprecate(Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Object[])">
            <summary>
            Used to define properties' variables without the $ prefix.
            Useful for cases like UNWIND
            </summary>
            <param name="var">The variable.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            UNWIND $items AS item 
                MATCH(n:Person { PropA: item.x })
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Rgx(System.Boolean)">
            <summary>
            Use regular expression comparison under WHERE clause.
            </summary>
            <param name="condition"></param>
            <returns></returns>
            <example>
            WHERE n.name =~ 'Tim.*'
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Rgx(System.Object)">
            <summary>
            Use regular expression comparison under WHERE clause.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            WHERE n.name =~ 'Tim.*'
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Profile">
            <summary>
            Profile execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Match(Weknow.Cypher.Builder.INode[])">
            <summary>
            Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Create(Weknow.Cypher.Builder.IPattern)">
            <summary>
            Create phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Merge(Weknow.Cypher.Builder.IPattern)">
            <summary>
            MERGE phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            MERGE (n:Person {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Unwind(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.CypherDelegates.Fluent)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Exists(Weknow.Cypher.Builder.CypherDelegates.Fluent)">
            <summary>
            EXISTS phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            exists(n.property)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Exists(Weknow.Cypher.Builder.CypherDelegates.NoVariable)">
            <summary>
            EXISTS phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            exists(n.property)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.IRelationNode}},System.Action{Weknow.CypherConfig})">
            <summary>
            Reuses the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.INodeRelation}},System.Action{Weknow.CypherConfig})">
            <summary>
            Reuses the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.INode}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.IRelation}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INodeRelation}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelationNode}},System.Action{Weknow.CypherConfig})">
            <summary>
            Reuses the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INodeRelation}},System.Action{Weknow.CypherConfig})">
            <summary>
            Reuses the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INodeRelation}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.INode}}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Func{Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IRelation}}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Timestamp">
            <summary>
            Milliseconds since midnight, January 1, 1970 UTC.
            </summary>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN timestamp()
            </example>
        </member>
        <member name="T:Weknow.Cypher.Builder.Cypher.Parameters">
            <summary>
            Parameters factories
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Create">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.CreateMulti">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Create``1">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.CreateMulti``2">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.CreateMulti``3">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.CreateMulti``4">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.CreateMulti``5">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.CreateMulti``6">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor">
            <summary>
            Parameters Deconstruction.
            </summary>
        </member>
        <member name="F:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Default">
            <summary>
            Parameters Deconstruction.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
            <param name="p9">The p9.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Parameters.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@,Weknow.Cypher.Builder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
            <param name="p9">The p9.</param>
            <param name="p10">The P10.</param>
        </member>
        <member name="T:Weknow.Cypher.Builder.Cypher.Variables">
            <summary>
            Variables factories
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Create">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.CreateMulti">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Create``1">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.CreateMulti``2">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.CreateMulti``3">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.CreateMulti``4">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.CreateMulti``5">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.CreateMulti``6">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor">
            <summary>
            Variables Deconstruction.
            </summary>
        </member>
        <member name="F:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Default">
            <summary>
            Variables Deconstruction.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
            <param name="v9">The v9.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Variables.Deconstructor.Deconstruct(Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@,Weknow.Cypher.Builder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
            <param name="v9">The v9.</param>
            <param name="v10">The P10.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Label(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.ILabel[])">
            <summary>
            Specify label of node
            </summary>
            <param name="variable">The variable.</param>
            <param name="labels"></param>
            <returns></returns>
            <example>
            MATCH (n)
            WHERE (n:Person)
            RETURN n
            ----------------
            MATCH (n)
            REMOVE n:Person
            ----------------
            MATCH (n)
            SET n:Spouse:Parent:Employee
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Type(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            String representation of the relationship type.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)-[r:LOVE]->(m)
            RETURN type(r)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.StartNode(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Start node of the relationship.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)-[r:LOVE]->(m)
            RETURN startNode(r)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.EndNode(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            End node of the relationship.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)-[r:LOVE]->(m)
            RETURN endNode(r)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Id(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            The internal id of the relationship.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN id(n)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Labels(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Labels of the node.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n:PERSON:ADMIN)
            RETURN labels(n)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Count(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Count the results.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN count(n)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Sum(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IProperty)">
            <summary>
            Sum numerical values. Similar functions are avg(), min(), max().
            </summary>
            <param name="variable">The variable.</param>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN sum(n.PropA)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Max(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IProperty)">
            <summary>
            Max numerical values. Similar functions are avg(), min(), sum().
            </summary>
            <param name="variable">The variable.</param>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN max(n.PropA)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Min(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IProperty)">
            <summary>
            Min numerical values. Similar functions are avg(), sum(), max().
            </summary>
            <param name="variable">The variable.</param>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN min(n.PropA)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Avg(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IProperty)">
            <summary>
            Avg numerical values. Similar functions are sum(), min(), max().
            </summary>
            <param name="variable">The variable.</param>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN avg(n.PropA)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.CountDistinct(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Count the results.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN count(n)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Collect(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            List from the values, ignores null.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            n.Collect() or Collect(n)
            result in:
            collect(n)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Collect(System.Object)">
            <summary>
            List from the values, ignores null.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
            <example>
            Collect(n._.Id)
            result in
            collect(n.Id)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.CollectDistinct(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            List from the values, ignores null.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN collect(DISTINCT n)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.CollectDistinct(Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            List from the values, ignores null.
            </summary>
            <param name="variable">The variable.</param>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN collect(DISTINCT n.PropA)
            </example>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherCommand">
            <summary>
            <![CDATA[Representation of Cypher Query & Parameters]]>
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherCommand.#ctor(System.String,Weknow.Cypher.Builder.CypherParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherCommand"/> class.
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherCommand.Query">
            <summary>
            Representation of Cypher Query.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherCommand.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherCommand.op_Implicit(Weknow.Cypher.Builder.CypherCommand)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Weknow.Cypher.Builder.CypherCommand"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="command">The command.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherCommand.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherCommand.Dump">
            <summary>
            <![CDATA[Dumps the Cypher Query & parameter into text format.]]>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates">
            <summary>
            Common delegate of the Cypher builder
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates.Fluent">
            <summary>
            Fluent delegate is the underline used to glue the Cypher expression.
            </summary>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates.Project`2">
            <summary>
            <![CDATA[Pattern delegate of T.
            Used for having IVar<T>]]>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates.NoVariable">
            <summary>
            Enable starting point which don't use any variable
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates.Project`1">
            <summary>
            <![CDATA[Pattern delegate of T.
            Used for having IVar]]>
            </summary>
            <typeparam name="R"></typeparam>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherGeneralExtensions">
            <summary>
            Cypher Extensions
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherGeneralExtensions.As(Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            Define variable's alias
            </summary>
            <param name="var">The variable.</param>
            <param name="alias">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherGeneralExtensions.As(System.Object,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Define variable's alias
            </summary>
            <param name="var">The variable.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherGeneralExtensions.AsProperty(System.Object)">
            <summary>
            Make it have property representation (in order to use it as cypher properties).
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherGeneralExtensions.AsParameter``1(Weknow.Cypher.Builder.Declarations.VariableDeclaration{``0})">
            <summary>
            Project the variable as parameter.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherParameters">
            <summary>
            Cypher Parameters representation
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherParameters"/> class.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherParameters.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherParameters"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherParameters.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherParameters"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherParameters"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherPhraseExtensions">
            <summary>
            Cypher Extensions
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Match(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.CypherDelegates.Fluent)">
            <summary>
            Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            <![CDATA[ MATCH (n:Person)-[:KNOWS]->(m:Person) ]]>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Match(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.IPattern)">
            <summary>
            Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
            <example>
            <![CDATA[ MATCH (n:Person)-[:KNOWS]->;(m:Person) ]]>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OptionalMatch(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.CypherDelegates.Fluent)">
            <summary>
            Optional Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            OPTIONAL MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Create(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.CypherDelegates.Fluent)">
            <summary>
            Create phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Create(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.IPattern)">
            <summary>
            Create phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pattern"></param>
            <returns></returns>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Merge(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.CypherDelegates.Fluent)">
            <summary>
            MERGE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            MERGE (n:Person {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Merge(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.IPattern)">
            <summary>
            MERGE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
            <example>
            MERGE (n:Person {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnCreateSet(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSet(n, map)
            result in:
            ON CREATE SET n = map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnCreateSet(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.ParameterDeclaration)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSet(n, map)
            result in:
            ON CREATE SET n = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnCreateSet(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSet(n, new {prm._.Name, var._.Code})
            result in:
            ON CREATE SET n.Name = $Name, n.Code = prm.Code
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnCreateSetPlus(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSetPlus(n, map)
            result in:
            ON CREATE SET n += map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnCreateSetPlus(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.ParameterDeclaration)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSetPlus(n, map)
            result in:
            ON CREATE SET n += $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnMatchSet(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSet(n, map)
            result in:
            ON MATCH SET n = map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnMatchSet(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.ParameterDeclaration)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSet(n, map)
            result in:
            ON MATCH SET n = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnMatchSet(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSet(n, new {prm._.Name, var._.Code})
            result in:
            ON MATCH SET n.Name = $Name, n.Code = prm.Code
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnMatchSetPlus(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSetPlus(n, map)
            result in:
            ON MATCH SET n += map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OnMatchSetPlus(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.ParameterDeclaration)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSetPlus(n, map)
            result in:
            ON MATCH SET n += $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.ILabel[])">
            <summary>
            SET label.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <returns></returns>
            <example>
            SET n:Person:Manager
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var">The variable.</param>
            <param name="assignment">The complex.</param>
            <returns></returns>
            <example>
            .Set(n, map)
            result in:
            SET n = map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.ParameterDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .Set(n, map)
            result in:
            SET n = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            SET  phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="assignment">The complex.</param>
            <returns></returns>
            <example>
            .Set(n, new {prm._.Name, var._.Code})
            result in:
            SET n.Name = $Name, n.Code = prm.Code
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.SetPlus(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var">The variable.</param>
            <param name="assignment">The assignment.</param>
            <returns></returns>
            <example>
            .SetPlus(n, map)
            result in:
            SET n += map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.SetPlus(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.ParameterDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="fluent"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .SetPlus(n, map)
            result in:
            SET n += $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Where(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Boolean)">
            <summary>
            WHERE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="condition"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Where(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.IProperties)">
            <summary>
            WHERE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Return(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Object[])">
            <summary>
            RETURN phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            RETURN n
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Return(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.IProperties)">
            <summary>
            RETURN phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            RETURN n.Id
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.ReturnDistinct(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Object[])">
            <summary>
            RETURN DISTINCT phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            RETURN DISTINCT n
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.ReturnDistinct(Weknow.Cypher.Builder.CypherDelegates.Fluent,Weknow.Cypher.Builder.IProperties)">
            <summary>
            RETURN phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            RETURN n.Id
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.With(Weknow.Cypher.Builder.CypherDelegates.Fluent)">
            <summary>
            WITH phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            WITH user, count(friend) AS friends
            WHERE friends > 10
            RETURN user
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.With(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Object[])">
            <summary>
            WITH phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            WITH user, count(friend) AS friends
            WHERE friends > 10
            RETURN user
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OrderBy(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Object[])">
            <summary>
            ORDER BY phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WITH user, count(friend) AS friends
            ORDER BY friends
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.OrderByDesc(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Object[])">
            <summary>
            ORDER BY DESC phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WITH user, count(friend) AS friends
            ORDER BY friends DESC
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Skip(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Int32)">
            <summary>
            SKIP phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="count"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            SKIP 10
            LIMIT 5
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Limit(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Int32)">
            <summary>
            LIMIT phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="count"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            SKIP 10
            LIMIT 5
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.Delete(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Object[])">
            <summary>
            DELETE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            DELETE n
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPhraseExtensions.DetachDelete(Weknow.Cypher.Builder.CypherDelegates.Fluent,System.Object[])">
            <summary>
            DETACH DELETE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            DETACH DELETE n
            </example>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherPredicateExtensions">
            <summary>
            Cypher Extensions
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPredicateExtensions.Compare(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Compares the specified with.
            </summary>
            <param name="compare">The compare.</param>
            <param name="with">The with.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPredicateExtensions.In(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IProperty,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            IN phrase.
            </summary>
            <param name="variable">The variable.</param>
            <param name="property">The property.</param>
            <param name="compareWith">The compare with.</param>
            <returns></returns>
            <example>
            n.property IN [$value1, $value2]
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherPredicateExtensions.In(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            IN phrase.
            </summary>
            <param name="variable">The variable.</param>
            <param name="compareWith">The compare with.</param>
            <returns></returns>
            <example>
            n.property IN [$value1, $value2]
            </example>
        </member>
        <member name="T:Weknow.Cypher.Builder.LabelFromGenerics">
            <summary>
            Indicate whether to use the generics argument as label
            </summary>
        </member>
        <member name="F:Weknow.Cypher.Builder.LabelFromGenerics.Use">
            <summary>
            The use
            </summary>
        </member>
        <member name="F:Weknow.Cypher.Builder.LabelFromGenerics.Ignore">
            <summary>
            The ignore
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.PropertyContextBehaviors">
            <summary>
            Behaviors of Ignore Context.
            </summary>
        </member>
        <member name="F:Weknow.Cypher.Builder.PropertyContextBehaviors.None">
            <summary>
            Avoid this setting
            </summary>
        </member>
        <member name="F:Weknow.Cypher.Builder.PropertyContextBehaviors.Plan">
            <summary>
            No formatting
            </summary>
        </member>
        <member name="F:Weknow.Cypher.Builder.PropertyContextBehaviors.Dolar">
            <summary>
            No formatting except the $ sign.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.ExpressionPattern">
            <summary>
            Represent predefine pattern
            </summary>
            <seealso cref="T:Weknow.Cypher.Builder.IPattern" />
        </member>
        <member name="M:Weknow.Cypher.Builder.ExpressionPattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.ExpressionPattern"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.ExpressionPattern.op_Implicit(Weknow.Cypher.Builder.ExpressionPattern)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Weknow.Cypher.Builder.ExpressionPattern"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ExpressionPattern.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.INode">
            <summary>
            Pattern primitive for the Cypher expression.
            </summary>
            <example>
            The line and arrows in the following expression are patterns operations. 
            MATCH (n)-[r]->(m)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="M:Weknow.Cypher.Builder.INode.op_Subtraction(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.IRelationNode)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.INode.op_Subtraction(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.INode)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.INode.op_Subtraction(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.INode.op_GreaterThan(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.INode)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.INode.op_GreaterThan(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.INode.op_LessThan(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.INode)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.INode.op_LessThan(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.INodeRelation">
            <summary>
            Represent node to relation
            </summary>
            <seealso cref="T:Weknow.Cypher.Builder.IPattern" />
        </member>
        <member name="M:Weknow.Cypher.Builder.INodeRelation.op_GreaterThan(Weknow.Cypher.Builder.INodeRelation,Weknow.Cypher.Builder.INode)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.INodeRelation.op_LessThan(Weknow.Cypher.Builder.INodeRelation,Weknow.Cypher.Builder.INode)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.IPattern">
            <summary>
            Pattern primitive for the Cypher expression.
            </summary>
            <example>
            The line and arrows in the following expression are patterns operations. 
            MATCH (n)-[r]->(m)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.IRelationNode">
            <summary>
            Represent relation to node
            </summary>
            <seealso cref="T:Weknow.Cypher.Builder.IPattern" />
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelationNode.op_GreaterThan(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.IRelationNode)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelationNode.op_LessThan(Weknow.Cypher.Builder.INode,Weknow.Cypher.Builder.IRelationNode)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.NodePattern">
            <summary>
            Represent predefine pattern
            </summary>
            <seealso cref="T:Weknow.Cypher.Builder.IPattern" />
        </member>
        <member name="M:Weknow.Cypher.Builder.NodePattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Weknow.Cypher.Builder.NodeRelationPattern">
            <summary>
            Represent node to relation
            </summary>
            <seealso cref="T:Weknow.Cypher.Builder.ExpressionPattern" />
            <seealso cref="T:Weknow.Cypher.Builder.INodeRelation" />
        </member>
        <member name="M:Weknow.Cypher.Builder.NodeRelationPattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Weknow.Cypher.Builder.RelationNodePattern">
            <summary>
            Represent relation to node
            </summary>
            <seealso cref="T:Weknow.Cypher.Builder.ExpressionPattern" />
            <seealso cref="T:Weknow.Cypher.Builder.IRelationNode" />
        </member>
        <member name="M:Weknow.Cypher.Builder.RelationNodePattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Weknow.Cypher.Builder.IRelation">
            <summary>
            Relation primitive for the Cypher expression.
            </summary>
            <example>
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.IType)">
            <summary>
            Represent relation with variable and type.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="type">The type.</param>
            <returns></returns>
            <example><![CDATA[(m)<-[r:KNOWS]-(n)]]></example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Represent relation with variable and type.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation" />.
            </value>
            <param name="var">The variable.</param>
            <returns></returns>
            <example><![CDATA[(m)<-[r:KNOWS]-(n)]]></example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IType)">
            <summary>
            Represent relation with variable and type.
            </summary>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <returns></returns>
            <example>
            <![CDATA[(m)<-[r:KNOWS]-(n)]]>
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IType,System.Object)">
            <summary>
            Represent relation with variable, type and properties.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            <![CDATA[(m)<-[r:KNOWS {name: $name}]-(n)]]>
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(System.Range)">
            <summary>
            Represent relation with range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Range)">
            <summary>
            Represent relation with variable and range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.Rng)">
            <summary>
            Represent relation with range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Rng)">
            <summary>
            Represent relation with variable and range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IType,System.Object,Weknow.Cypher.Builder.Rng)">
            <summary>
            Represent relation with variable, type and range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="type"></param>
            <param name="properties"></param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:KNOW*1..5 {level: 2}]->(m)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_Subtraction(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.INode)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_Subtraction(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_GreaterThan(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.INode)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_GreaterThan(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_LessThan(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.INode)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_LessThan(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.RelationPattern">
            <summary>
            Represent predefine pattern
            </summary>
            <seealso cref="T:Weknow.Cypher.Builder.IPattern" />
        </member>
        <member name="M:Weknow.Cypher.Builder.RelationPattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation" /> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation" />.
            </value>
            <param name="var">The variable.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(Weknow.Cypher.Builder.IType,System.Object)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation" /> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation" />.
            </value>
            <param name="type">The type.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IType,System.Object)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation" /> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation" />.
            </value>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Rng)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation"/> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(Weknow.Cypher.Builder.Rng)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation"/> with the specified r.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,System.Range)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation"/> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(System.Range)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation"/> with the specified r.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.IType)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation"/> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.RelationPattern.Weknow#Cypher#Builder#IRelation#Item(Weknow.Cypher.Builder.IType)">
            <summary>
            Gets the <see cref="T:Weknow.Cypher.Builder.IRelation"/> with the specified type.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.Rng">
            <summary>
            Represent alternative to range syntax (currently the range syntax is not supported as expression)
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Rng.Any">
            <summary>
            Any length
            </summary>
            <example>
            (a)-[*]->(b)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Rng.AtLeast(System.Int32)">
            <summary>
            At least
            </summary>
            <param name="i">The i.</param>
            <example>
            (a)-[*3..]->(b)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Rng.AtMost(System.Int32)">
            <summary>
            At most
            </summary>
            <param name="i">The i.</param>
            <example>
            (a)-[*..5]->(b)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Rng.Scope(System.Int32,System.Int32)">
            <summary>
            From start index to end index.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
            <example>
            (a)-[*3..5]->(b)
            </example>
        </member>
        <member name="T:Weknow.Cypher.Builder.ILabel">
            <summary>
            Label primitive for the Cypher expression.
            </summary>
            <example>
            The Person in the following expression will use the Label primitive.
            MATCH (n:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="M:Weknow.Cypher.Builder.ILabel.op_BitwiseAnd(Weknow.Cypher.Builder.ILabel,Weknow.Cypher.Builder.ILabel)">
            <summary>
            Implements the operator &amp;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
            <example><![CDATA[(n:Person:Animal)]]></example>
        </member>
        <member name="T:Weknow.Cypher.Builder.IType">
            <summary>
            Relation's Type primitive for the Cypher expression.
            </summary>
            <example>
            The KNOWS in the following expression will use the Type primitive.
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="M:Weknow.Cypher.Builder.IType.op_BitwiseOr(Weknow.Cypher.Builder.IType,Weknow.Cypher.Builder.IType)">
            <summary>
            Implements the operator |.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
            <example><![CDATA[(n)-[:KNOWS|:LOVES]->(m)]]></example>
        </member>
        <member name="T:Weknow.Cypher.Builder.Declarations.ParameterDeclaration">
            <summary>
            Parameter primitive for the Cypher expression.
            </summary>
            <example>
            The $value in the following expression will use the Parameter primitive.
            CREATE (n:Person {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.Cypher.Builder.Declarations.ParameterDeclaration.Default">
            <summary>
            Default (and only) way to get cypher parameter.
            It use under expression and don't need a real implementation;
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Declarations.ParameterDeclaration.op_UnaryPlus(Weknow.Cypher.Builder.Declarations.ParameterDeclaration)">
            <summary>
            Declaration for operator +.
            </summary>
            <param name="map">The map.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.Declarations.ParameterDeclaration`1">
            <summary>
            Parameter primitive for the Cypher expression.
            </summary>
            <example>
            The $value in the following expression will use the Parameter primitive.
            CREATE (n:Person {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.Cypher.Builder.Declarations.ParameterDeclaration`1.Default">
            <summary>
            Default (and only) way to get cypher parameter.
            It use under expression and don't need a real implementation;
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.Declarations.ParameterDeclaration`1._">
            <summary>
            Gets type representation of the variable.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Declarations.ParameterDeclaration`1.op_Implicit(Weknow.Cypher.Builder.Declarations.ParameterDeclaration{`0})~`0">
            <summary>
            Casting overload.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Declarations.ParameterDeclaration`1.op_OnesComplement(Weknow.Cypher.Builder.Declarations.ParameterDeclaration{`0})">
            <summary>
            Use the parameter as prefix
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.Declarations.VariableDeclaration`1">
            <summary>
            Variable primitive for the Cypher expression.
            </summary>
            <typeparam name="T"></typeparam>
            <example>
            The n in the following expression will use the variable primitive. 
            CREATE (n {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.Cypher.Builder.Declarations.VariableDeclaration`1.Default">
            <summary>
            Default (and only) way to get cypher parameter.
            It use under expression and don't need a real implementation;
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.Declarations.VariableDeclaration`1._">
            <summary>
            Gets type representation of the variable.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.Declarations.VariableDeclaration`1.Inc">
            <summary>
            Gets type representation of the variable which should be increment.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.Declarations.VariableDeclaration">
            <summary>
            Variable primitive for the Cypher expression.
            </summary>
            <example>
            The n in the following expression will use the variable primitive. 
            CREATE (n {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.Cypher.Builder.Declarations.VariableDeclaration.Default">
            <summary>
            Default (and only) way to get cypher parameter.
            It use under expression and don't need a real implementation;
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Declarations.VariableDeclaration.op_Addition(Weknow.Cypher.Builder.Declarations.VariableDeclaration,Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Declaration for operator +.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Declarations.VariableDeclaration.op_UnaryPlus(Weknow.Cypher.Builder.Declarations.VariableDeclaration)">
            <summary>
            Declaration for unary operator +.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.IProperties">
            <summary>
            Properties primitive for the Cypher expression.
            </summary>
            <example>
            The name, age in the following expression will use the Properties primitive.
            MATCH (n {name: 'Alice', age: 37})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.IProperty">
            <summary>
            Property primitive for the Cypher expression.
            </summary>
            <example>
            The name in the following expression will use the Property primitive.
            MATCH (n {name: 'Alice'})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherQueryBuilder">
            <summary>
            Responsible for abstracting the logic of the actual 
            Cypher text building.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherQueryBuilder.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Char"/> at the specified index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherQueryBuilder.Item(System.Int32,System.Int32)">
            <summary>
            <![CDATA[Gets the <see cref="ReadOnlySpan{System.Char}" /> with the specified start index.]]>
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherQueryBuilder.Item(System.Range)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified range.
            </summary>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.Append``1(``0)">
            <summary>
            Appends text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the specified start index.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.Remove(System.Range)">
            <summary>
            Removes the specified range.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherQueryBuilder.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.ToString(System.Range)">
            <summary>
            Converts to string.
            </summary>
            <param name="range">The range.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets the range.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherQueryBuilder.Deconstruct(System.Range,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the range.
            </summary>
            <param name="range">The range.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherVisitor">
            <summary>
            The cypher visitor is the heart of the ORM implementation
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.#ctor(Weknow.CypherConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherVisitor"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherVisitor.Query">
            <summary>
            Mutable state of the cypher query.
            Query build during the visitor traverse.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherVisitor.Parameters">
            <summary>
            Mutable state of the parameters.
            Parameters build during the visitor traverse.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.ApplyFormat(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>
            Applies the format.
            </summary>
            <param name="node">The node.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.EqualPattern">
            <summary>
            Determines whether [is equal pattern].
            </summary>
            <returns>
              <c>true</c> if [is equal pattern]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.HandleProperties(System.Object)">
            <summary>
            Handles the properties.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.UseGenericsAsLabel(System.Linq.Expressions.Expression)">
            <summary>
            Uses the generics as label.
            </summary>
            <param name="arg">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.IsProperty(System.Type)">
            <summary>
            Determines whether the specified type is property.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.AppendPropSeparator">
            <summary>
            Appends the property separator.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.ContextValue`1">
            <summary>
            Context container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.ContextValue`1"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.ContextValue`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.ContextValue`1.Values">
            <summary>
            Gets all values.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.Set(`0)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.Set(`0,System.Boolean)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.op_Implicit(Weknow.Cypher.Builder.ContextValue{`0})~`0">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.DisposeableAction">
            <summary>
            Dispose-able action
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Weknow.Cypher.Builder.DisposeableAction.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.DisposeableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.DisposeableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.DisposeableAction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Weknow.CypherAmbientLabelConfig">
            <summary>
            Label configuration
            </summary>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.#ctor(Weknow.CypherNamingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherAmbientLabelConfig"/> class.
            </summary>
            <param name="naming">The naming.</param>
        </member>
        <member name="P:Weknow.CypherAmbientLabelConfig.Values">
            <summary>
            Gets the additional ambient labels which will be added to cypher queries
            (when the expression is not hard-codded string).
            </summary>
        </member>
        <member name="P:Weknow.CypherAmbientLabelConfig.Formatter">
            <summary>
            Gets or sets the formatter label formatter.
            For example "`@{0}`"
            </summary>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Add(System.String[])">
            <summary>
            Adds the additional ambient labels which will be added to cypher queries.
            </summary>
            <param name="additionalLabels">The additional labels.</param>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Combine(System.String[])">
            <summary>
            Get combined label string with ambient and additional labels.
            </summary>
            <param name="additionalLabels">The labels.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Combine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get combined label string with ambient and additional labels.
            </summary>
            <param name="additionalLabels">The labels.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.AmbientFormat(System.String)">
            <summary>
            Ambients the format.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.FormatByConvention``1(``0)">
            <summary>
            Formats the specified text.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Weknow.CypherConfig">
            <summary>
            The cypher builder configuration.
            </summary>
        </member>
        <member name="M:Weknow.CypherConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherConfig"/> class.
            </summary>
        </member>
        <member name="P:Weknow.CypherConfig.AmbientLabels">
            <summary>
            Ambient Label configuration
            </summary>
        </member>
        <member name="P:Weknow.CypherConfig.Naming">
            <summary>
            Gets the naming convention.
            </summary>
        </member>
        <member name="T:Weknow.CypherNamingConfig">
            <summary>
            Naming convention
            </summary>
        </member>
        <member name="M:Weknow.CypherNamingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherNamingConfig"/> class.
            </summary>
        </member>
        <member name="P:Weknow.CypherNamingConfig.Convention">
            <summary>
            Gets or sets the convention.
            </summary>
        </member>
        <member name="P:Weknow.CypherNamingConfig.ConventionAffects">
            <summary>
            Gets or sets the convention affects.
            </summary>
        </member>
        <member name="P:Weknow.CypherNamingConfig.Pluralization">
            <summary>
            Gets or sets the pluralization service.
            </summary>
        </member>
        <member name="M:Weknow.CypherNamingConfig.SetPluralization(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Sets the pluralization service.
            </summary>
            <param name="pluralize">The pluralize.</param>
            <param name="singularize">The singularize.</param>
        </member>
        <member name="M:Weknow.CypherNamingConfig.FormatByConvention(System.String,Weknow.CypherNamingConvention)">
            <summary>
            Formats by convention.
            </summary>
            <param name="text">The text.</param>
            <param name="convention">The convention.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherFormat">
            <summary>
            Cypher formatting options
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.SingleLine">
            <summary>
            A single line of cypher query
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.MultiLine">
            <summary>
            Multi line of cypher query
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.MultiLineDense">
            <summary>
            Multi line of cypher query with some density on where and set properties
            </summary>
        </member>
        <member name="T:Weknow.CypherNamingConvention">
            <summary>
            Formatting options
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.SCREAMING_CASE">
            <summary>
            The screaming case
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.camelCase">
            <summary>
            The camel case
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.PacalCase">
            <summary>
            The pacal case
            </summary>
        </member>
        <member name="T:Weknow.NamingConventionAffects">
            <summary>
            What get affected by the naming convention
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.None">
            <summary>
            disable
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.Label">
            <summary>
            Node
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.Type">
            <summary>
            Relations
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Weknow.IPluralization">
            <summary>
            Pluralization services.
            </summary>
        </member>
        <member name="M:Weknow.IPluralization.Pluralize(System.String)">
            <summary>
            Pluralize a word using the service.
            </summary>
            <param name="word">The word to pluralize.</param>
            <returns>The pluralized word </returns>
        </member>
        <member name="M:Weknow.IPluralization.Singularize(System.String)">
            <summary>
            Singularize a word using the service.
            </summary>
            <param name="word">The word to singularize.</param>
            <returns>The singularized word.</returns>
        </member>
        <member name="T:Weknow.LambdaPluralization">
            <summary>
            Pluralization services.
            </summary>
        </member>
        <member name="M:Weknow.LambdaPluralization.#ctor(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.LambdaPluralization"/> class.
            </summary>
            <param name="pluralize">The pluralize.</param>
            <param name="singularize">The singularize.</param>
        </member>
        <member name="M:Weknow.LambdaPluralization.Pluralize(System.String)">
            <summary>
            Pluralize a word using the service.
            </summary>
            <param name="word">The word to pluralize.</param>
            <returns>The pluralized word </returns>
        </member>
        <member name="M:Weknow.LambdaPluralization.Singularize(System.String)">
            <summary>
            Singularize a word using the service.
            </summary>
            <param name="word">The word to singularize.</param>
            <returns>The singularized word.</returns>
        </member>
    </members>
</doc>
