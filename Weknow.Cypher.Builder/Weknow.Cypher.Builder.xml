<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.Cypher.Builder</name>
    </assembly>
    <members>
        <member name="T:Weknow.Cypher.Builder.CypherAttribute">
            <summary>
            Cypher Attribute used to specify formatting pattern
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherAttribute.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.Cypher">
            <summary>
            Entry point for constructing root level Cypher.
            For fluent cypher check <see cref="T:Weknow.Cypher.Builder.CypherExtensions"/>
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Init(Weknow.CypherConfig,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a builder.
            </summary>
            <param name="cfg">The CFG.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.PD},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._``1(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.PDT{``0,Weknow.Cypher.Builder.CypherDelegates.PD}},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._``2(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.PDT{``0,Weknow.Cypher.Builder.CypherDelegates.PDT{``1,Weknow.Cypher.Builder.CypherDelegates.PD}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._``3(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.PDT{``0,Weknow.Cypher.Builder.CypherDelegates.PDT{``1,Weknow.Cypher.Builder.CypherDelegates.PDT{``2,Weknow.Cypher.Builder.CypherDelegates.PD}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._``4(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.PDT{``0,Weknow.Cypher.Builder.CypherDelegates.PDT{``1,Weknow.Cypher.Builder.CypherDelegates.PDT{``2,Weknow.Cypher.Builder.CypherDelegates.PDT{``3,Weknow.Cypher.Builder.CypherDelegates.PD}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._``5(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.PDT{``0,Weknow.Cypher.Builder.CypherDelegates.PDT{``1,Weknow.Cypher.Builder.CypherDelegates.PDT{``2,Weknow.Cypher.Builder.CypherDelegates.PDT{``3,Weknow.Cypher.Builder.CypherDelegates.PDT{``4,Weknow.Cypher.Builder.CypherDelegates.PD}}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._``6(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.PDT{``0,Weknow.Cypher.Builder.CypherDelegates.PDT{``1,Weknow.Cypher.Builder.CypherDelegates.PDT{``2,Weknow.Cypher.Builder.CypherDelegates.PDT{``3,Weknow.Cypher.Builder.CypherDelegates.PDT{``4,Weknow.Cypher.Builder.CypherDelegates.PDT{``5,Weknow.Cypher.Builder.CypherDelegates.PD}}}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher._(System.Linq.Expressions.Expression{Weknow.Cypher.Builder.CypherDelegates.PDE},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.ILabel)">
            <summary>
            Specified node with label.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.IVar)">
            <summary>
            Specified node with variable.
            </summary>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.ILabel)">
            <summary>
            Specified node with variable and label.
            </summary>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.ILabel,Weknow.Cypher.Builder.IProperties)">
            <summary>
            Specified node with variable, label and properties.
            </summary>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.ILabel,Weknow.Cypher.Builder.IMap)">
            <summary>
            Specified node with variable, label and map.
            </summary>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <param name="map">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N``1(Weknow.Cypher.Builder.IVar)">
            <summary>
            Specified typed node with label.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N``1(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IMap)">
            <summary>
            Specified typed node with variable and properties map.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <param name="map">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N``1(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IProperties)">
            <summary>
            Specified typed node with variable and properties.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N``1(Weknow.Cypher.Builder.IVar{``0},Weknow.Cypher.Builder.IProperties)">
            <summary>
            Specified typed node with typed variable and label.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N``1(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.ILabel)">
            <summary>
            Specified typed node with variable and label.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N``1(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.ILabel,Weknow.Cypher.Builder.IProperties)">
            <summary>
            Specified typed node with variable, label and properties.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.N``1(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.ILabel,Weknow.Cypher.Builder.IMap)">
            <summary>
            Specified node with variable, label and map.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <param name="map">The properties.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Weknow.Cypher.Builder.Cypher.R">
            <summary>
            Gets the Cypher relation.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.P(Weknow.Cypher.Builder.IProperty[])">
            <summary>
            Represent  properties collection.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            {name: $name, value: $value}
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.P(System.Object[])">
            <summary>
            Represent  properties collection.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            {name: $name, value: $value}
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.P(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.IProperties}})">
            <summary>
            Represent  properties collection.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            {name: $name, value: $value}
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.P(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IProperty[])">
            <summary>
            Represent variable with properties collection.
            <param name="var"></param>
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Pre(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IProperties)">
            <summary>
            Represent properties with prefix.
            </summary>
            <param name="var"></param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Pre(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IProperty)">
            <summary>
            Represent properties with prefix.
            </summary>
            <param name="var"></param>
            <param name="property">The properties.</param>
            <returns></returns>
            <example>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Convention(System.Func{System.String,System.Boolean})">
            <summary>
            Gets properties by convention.
            </summary>
            <param name="filter"></param>
            <returns></returns>
            <example>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Convention``1(Weknow.Cypher.Builder.IVar,System.Func{System.String,System.Boolean})">
            <summary>
            Gets properties by convention with variable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
            <example></example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Convention``1(System.Func{System.String,System.Boolean})">
            <summary>
            Gets properties by convention.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter">The filter.</param>
            <returns></returns>
            <example></example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.All">
            <summary>
            All properties of the type.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.All``1(Weknow.Cypher.Builder.IVar)">
            <summary>
            All properties of the type.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.AllExcept(System.Object[])">
            <summary>
            All properties of the type except the ones specify in the parameters.
            </summary>
            <param name="except">The except.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.As``1(Weknow.Cypher.Builder.IVar)">
            <summary>
            Define variable as type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Profile">
            <summary>
            Profile execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Match(Weknow.Cypher.Builder.IPattern)">
            <summary>
            Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Create(Weknow.Cypher.Builder.IPattern)">
            <summary>
            Create phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Merge(Weknow.Cypher.Builder.IPattern)">
            <summary>
            MERGE phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            MERGE (n:Person {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Unwind(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.CypherDelegates.PD)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Unwind(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.CypherDelegates.PD)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items"></param>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Exists(Weknow.Cypher.Builder.CypherDelegates.PD)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            exists(n.property)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IPattern}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse``1(``0)">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.Cypher.Reuse``3(``0,Weknow.Cypher.Builder.IReuse{``1,``2})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="r"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherCommand">
            <summary>
            <![CDATA[Representation of Cypher Query & Parameters]]>
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherCommand.#ctor(System.String,Weknow.Cypher.Builder.CypherParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherCommand"/> class.
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherCommand.Query">
            <summary>
            Representation of Cypher Query.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherCommand.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherCommand.op_Implicit(Weknow.Cypher.Builder.CypherCommand)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Weknow.Cypher.Builder.CypherCommand"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="command">The command.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherCommand.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherCommand.Dump">
            <summary>
            <![CDATA[Dumps the Cypher Query & parameter into text format.]]>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates">
            <summary>
            Common delegate of the Cypher builder
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates.PD">
            <summary>
            Pattern delegate
            </summary>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates.PDT`2">
            <summary>
            Pattern delegate for relation definition
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherDelegates.PDE">
            <summary>
            Pattern delegate expression
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherExtensions">
            <summary>
            Cypher Extensions
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Match(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.CypherDelegates.PD)">
            <summary>
            Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Create(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.CypherDelegates.PD)">
            <summary>
            Create phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Merge(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.CypherDelegates.PD)">
            <summary>
            MERGE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            MERGE (n:Person {name: $value})
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OnCreateSet(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IPropertiesOfType)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            MERGE (n:Person {id: $value})
            ON CREATE SET p = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OnCreateSet(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IMap)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="map"></param>
            <returns></returns>
            <example>
            MERGE (n:Person {id: $value})
            ON CREATE SET p = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OnCreateSet(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IMap)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="map"></param>
            <returns></returns>
            <example>
            MERGE (n:Person {id: $value})
            ON CREATE SET p = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OnMatchSet(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IPropertiesOfType)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            MERGE (n:Person {id: $value})
            ON CREATE SET p = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OnMatchSet(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IMap)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="map"></param>
            <returns></returns>
            <example>
            MERGE (n:Person {id: $value})
            ON CREATE SET p = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OnMatchSet(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IMap)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="map"></param>
            <returns></returns>
            <example>
            MERGE (n:Person {id: $value})
            ON CREATE SET p = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OptionalMatch(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.CypherDelegates.PD)">
            <summary>
            Optional Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            OPTIONAL MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Where(Weknow.Cypher.Builder.CypherDelegates.PD,System.Boolean)">
            <summary>
            WHERE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="condition"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Where(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IPropertiesOfType)">
            <summary>
            WHERE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Return(Weknow.Cypher.Builder.CypherDelegates.PD,System.Object[])">
            <summary>
            RETURN phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            RETURN n
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.With(Weknow.Cypher.Builder.CypherDelegates.PD,System.Object[])">
            <summary>
            WITH phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            WITH user, count(friend) AS friends
            WHERE friends > 10
            RETURN user
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OrderBy(Weknow.Cypher.Builder.CypherDelegates.PD,System.Object[])">
            <summary>
            ORDER BY phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WITH user, count(friend) AS friends
            ORDER BY friends
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.OrderByDesc(Weknow.Cypher.Builder.CypherDelegates.PD,System.Object[])">
            <summary>
            ORDER BY DESC phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="vars"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WITH user, count(friend) AS friends
            ORDER BY friends DESC
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Skip(Weknow.Cypher.Builder.CypherDelegates.PD,System.Int32)">
            <summary>
            SKIP phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="count"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            SKIP 10
            LIMIT 5
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Limit(Weknow.Cypher.Builder.CypherDelegates.PD,System.Int32)">
            <summary>
            LIMIT phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="count"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            SKIP 10
            LIMIT 5
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.ILabel)">
            <summary>
            SET label phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="node"></param>
            <param name="label"></param>
            <returns></returns>
            <example>
            SSET n:Person
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IVar)">
            <summary>
            SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="node"></param>
            <param name="map"></param>
            <returns></returns>
            <example>
            SET n = $map
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IMap)">
            <summary>
            SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="map">The properties.</param>
            <returns></returns>
            <example>
            SET n.property1 = $value1,
            n.property2 = $value2
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IVar)">
            <summary>
            SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="node">The node.</param>
            <returns></returns>
            <example>
            SET n.property1 = $value1,
            n.property2 = $value2
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherExtensions.Set(Weknow.Cypher.Builder.CypherDelegates.PD,Weknow.Cypher.Builder.IPropertiesOfType)">
            <summary>
            SET phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            SET n.property1 = $value1,
            n.property2 = $value2
            </example>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherParameters">
            <summary>
            Cypher Parameters representation
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherParameters"/> class.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherParameters.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherParameters"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherParameters.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherParameters"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherParameters"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="T:Weknow.Cypher.Builder.ExpressionPattern">
            <summary>
            Represent predefine pattern
            </summary>
            <seealso cref="T:Weknow.Cypher.Builder.IPattern" />
        </member>
        <member name="M:Weknow.Cypher.Builder.ExpressionPattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.ExpressionPattern"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.ExpressionPattern.op_Implicit(Weknow.Cypher.Builder.ExpressionPattern)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Weknow.Cypher.Builder.ExpressionPattern"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ExpressionPattern.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.IETagProperty">
            <summary>
            ETag Property is a special primitive which will translate 
            to optimistic concurrency pattern in the Cypher expression.
            </summary>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.ILabel">
            <summary>
            Label primitive for the Cypher expression.
            </summary>
            <example>
            The Person in the following expression will use the Label primitive.
            MATCH (n:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.IMap">
            <summary>
            Mapping variable primitive for the Cypher expression.
            </summary>
            <example>
            Used for queries like: 
            CREATE (n $map)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="M:Weknow.Cypher.Builder.IMap.op_UnaryPlus(Weknow.Cypher.Builder.IMap)">
            <summary>
            Declaration for operator +.
            </summary>
            <param name="map">The map.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.IParameter">
            <summary>
            Parameter primitive for the Cypher expression.
            </summary>
            <example>
            The $value in the following expression will use the Parameter primitive.
            CREATE (n:Person {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.IPattern">
            <summary>
            Pattern primitive for the Cypher expression.
            </summary>
            <example>
            The line and arrows in the following expression are patterns operations. 
            MATCH (n)-[r]->(m)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="M:Weknow.Cypher.Builder.IPattern.op_Subtraction(Weknow.Cypher.Builder.IPattern,Weknow.Cypher.Builder.IPattern)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IPattern.op_GreaterThan(Weknow.Cypher.Builder.IPattern,Weknow.Cypher.Builder.IPattern)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IPattern.op_LessThan(Weknow.Cypher.Builder.IPattern,Weknow.Cypher.Builder.IPattern)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.IType">
            <summary>
            Relation's Type primitive for the Cypher expression.
            </summary>
            <example>
            The KNOWS in the following expression will use the Type primitive.
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.IVar`1">
            <summary>
            Variable primitive for the Cypher expression.
            </summary>
            <typeparam name="T"></typeparam>
            <example>
            The n in the following expression will use the variable primitive. 
            CREATE (n {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="P:Weknow.Cypher.Builder.IVar`1.P">
            <summary>
            Gets type representation of the variable.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.IVar">
            <summary>
            Variable primitive for the Cypher expression.
            </summary>
            <example>
            The n in the following expression will use the variable primitive. 
            CREATE (n {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="M:Weknow.Cypher.Builder.IVar.op_Addition(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IVar)">
            <summary>
            Declaration for operator +.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.IVar.op_UnaryPlus(Weknow.Cypher.Builder.IVar)">
            <summary>
            Declaration for unary operator +.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Weknow.Cypher.Builder.IVar.AsMap">
            <summary>
            Use mapping technique.
            For example: CREATE (n $map)
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.IProperties">
            <summary>
            Properties primitive for the Cypher expression.
            </summary>
            <example>
            The name, age in the following expression will use the Properties primitive.
            MATCH (n {name: 'Alice', age: 37})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.IPropertiesOfType">
            <summary>
            Properties primitive for the Cypher expression.
            </summary>
            <example>
            The name, age in the following expression will use the Properties primitive.
            MATCH (n {name: 'Alice', age: 37})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.IProperty">
            <summary>
            Property primitive for the Cypher expression.
            </summary>
            <example>
            The name in the following expression will use the Property primitive.
            MATCH (n {name: 'Alice'})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.Cypher.Builder.IRelation">
            <summary>
            Relation primitive for the Cypher expression.
            </summary>
            <example>
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IType)">
            <summary>
            Represent relation with variable and type.
            </summary>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <returns></returns>
            <example>
            <![CDATA[(m)<-[r:KNOWS]-(n)]]>
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IType,Weknow.Cypher.Builder.IProperties)">
            <summary>
            Represent relation with variable, type and properties.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            <![CDATA[(m)<-[r:KNOWS {name: $name}]-(n)]]>
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(System.Range)">
            <summary>
            Represent relation with range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.IVar,System.Range)">
            <summary>
            Represent relation with variable and range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IType,Weknow.Cypher.Builder.IProperties,System.Range)">
            <summary>
            Represent relation with variable, type and range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="type"></param>
            <param name="properties"></param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:KNOW*1..5 {level: 2}]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.Rng)">
            <summary>
            Represent relation with range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.Rng)">
            <summary>
            Represent relation with variable and range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.Cypher.Builder.IRelation.Item(Weknow.Cypher.Builder.IVar,Weknow.Cypher.Builder.IType,Weknow.Cypher.Builder.IProperties,Weknow.Cypher.Builder.Rng)">
            <summary>
            Represent relation with variable, type and range.
            </summary>
            <value>
            The <see cref="T:Weknow.Cypher.Builder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="type"></param>
            <param name="properties"></param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:KNOW*1..5 {level: 2}]->(m)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_Subtraction(Weknow.Cypher.Builder.IPattern,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Represent relation operator..
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
            <example>
            [n]-[m]
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_Subtraction(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.IPattern)">
            <summary>
            Represent relation operator..
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
            <example>
            [n]-(m)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_GreaterThan(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Represent relation operator..
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
            <example>
            [n]->[m]
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_LessThan(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Represent relation operator..
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
            <example>
            <![CDATA[ [n]<-[m] ]]>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_GreaterThan(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.IPattern)">
            <summary>
            Represent relation operator..
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
            <example>
            <![CDATA[ [n]->(m) ]]>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_LessThan(Weknow.Cypher.Builder.IRelation,Weknow.Cypher.Builder.IPattern)">
            <summary>
            Represent relation operator..
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
            <example>
            <![CDATA[ [n]<-(m) ]]>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_GreaterThan(Weknow.Cypher.Builder.IPattern,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Represent relation operator..
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
            <example>
            <![CDATA[ (n)->[m] ]]>
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.IRelation.op_LessThan(Weknow.Cypher.Builder.IPattern,Weknow.Cypher.Builder.IRelation)">
            <summary>
            Represent relation operator..
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
            <example>
            <![CDATA[ (n)<-[m] ]]>
            </example>
        </member>
        <member name="T:Weknow.Cypher.Builder.Rng">
            <summary>
            Represent alternative to range syntax (currently the range syntax is not supported as expression)
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.Rng.Any">
            <summary>
            Any length
            </summary>
            <example>
            (a)-[*]->(b)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Rng.AtLeast(System.Int32)">
            <summary>
            At least
            </summary>
            <param name="i">The i.</param>
            <example>
            (a)-[*3..]->(b)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Rng.AtMost(System.Int32)">
            <summary>
            At most
            </summary>
            <param name="i">The i.</param>
            <example>
            (a)-[*..5]->(b)
            </example>
        </member>
        <member name="M:Weknow.Cypher.Builder.Rng.Scope(System.Int32,System.Int32)">
            <summary>
            From start index to end index.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
            <example>
            (a)-[*3..5]->(b)
            </example>
        </member>
        <member name="T:Weknow.Cypher.Builder.IReuse`2">
            <summary>
            Reuse contract
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Weknow.Cypher.Builder.IReuse`2.By(System.Func{`0,`1})">
            <summary>
            Pipe the reuse content.
            </summary>
            <param name="a">a.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.Reuse`2">
            <summary>
            Reuse encapsulation
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <seealso cref="T:Weknow.Cypher.Builder.IReuse`2" />
        </member>
        <member name="M:Weknow.Cypher.Builder.Reuse`2.#ctor(System.Func{System.Func{`0,`1},Weknow.Cypher.Builder.CypherDelegates.PD})">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.Reuse`2"/> class.
            </summary>
            <param name="by">The by.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.Reuse`2.Weknow#Cypher#Builder#IReuse{T,U}#By(System.Func{`0,`1})">
            <summary>
            Reused by
            </summary>
            <param name="a">a.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.CypherVisitor">
            <summary>
            The cypher visitor is the heart of the ORM implementation
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.#ctor(Weknow.CypherConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.CypherVisitor"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherVisitor.Query">
            <summary>
            Mutable state of the cypher query.
            Query build during the visitor traverse.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.CypherVisitor.Parameters">
            <summary>
            Mutable state of the parameters.
            Parameters build during the visitor traverse.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.Visit(Weknow.Cypher.Builder.ContextExpression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.ApplyFormat(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>
            Applies the format.
            </summary>
            <param name="node">The node.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.CypherVisitor.IsEqualPattern">
            <summary>
            Determines whether [is equal pattern].
            </summary>
            <returns>
              <c>true</c> if [is equal pattern]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.ContextExpression">
            <summary>
            Context of the expression
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextExpression.#ctor(System.Boolean,System.Boolean,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.ContextExpression"/> class.
            </summary>
            <param name="isPluralize">if set to <c>true</c> [is pluralize].</param>
            <param name="isSingularize">if set to <c>true</c> [is singularize].</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.ContextExpression.IsPluralize">
            <summary>
            Gets or sets a value indicating whether this instance is pluralize.
            </summary>
            <value>
              <c>true</c> if this instance is pluralize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Weknow.Cypher.Builder.ContextExpression.IsSingularize">
            <summary>
            Gets or sets a value indicating whether this instance is singularize.
            </summary>
            <value>
              <c>true</c> if this instance is singularize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Weknow.Cypher.Builder.ContextExpression.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="T:Weknow.Cypher.Builder.ContextValue`1">
            <summary>
            Context container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.ContextValue`1"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.ContextValue`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.ContextValue`1.Values">
            <summary>
            Gets all values.
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.Set(`0)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.ContextValue`1.op_Implicit(Weknow.Cypher.Builder.ContextValue{`0})~`0">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Weknow.Cypher.Builder.DisposeableAction">
            <summary>
            Dispose-able action
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Weknow.Cypher.Builder.DisposeableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.DisposeableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Weknow.Cypher.Builder.DisposeableAction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Weknow.Cypher.Builder.FormatingState">
            <summary>
            Represent Formatting state.
            Relevant to parsing of CypherAttribute's Format
            </summary>
        </member>
        <member name="F:Weknow.Cypher.Builder.FormatingState.Default">
            <summary>
            Singleton
            </summary>
        </member>
        <member name="M:Weknow.Cypher.Builder.FormatingState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.Cypher.Builder.FormatingState"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Weknow.Cypher.Builder.FormatingState.Index">
            <summary>
            Gets the current index.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.FormatingState.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.FormatingState.Current">
            <summary>
            Gets the current char.
            </summary>
        </member>
        <member name="P:Weknow.Cypher.Builder.FormatingState.Ended">
            <summary>
            Gets a value indicating whether this <see cref="T:Weknow.Cypher.Builder.FormatingState"/> is ended.
            </summary>
            <value>
              <c>true</c> if ended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Weknow.Cypher.Builder.FormatingState.op_Implicit(Weknow.Cypher.Builder.FormatingState)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:Weknow.Cypher.Builder.FormatingState"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.FormatingState.op_Increment(Weknow.Cypher.Builder.FormatingState)">
            <summary>
            Implements the operator ++.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.Cypher.Builder.FormatingState.op_Decrement(Weknow.Cypher.Builder.FormatingState)">
            <summary>
            Implements the operator --.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.ConcurrencyConfig">
            <summary>
            Represent contextual operations.
            </summary>
        </member>
        <member name="P:Weknow.ConcurrencyConfig.eTagName">
            <summary>
            When supplied the concurrency field
            used for incrementing the concurrency version (Optimistic concurrency)
            make sure to set unique constraint (on the matching properties),
            otherwise a new node with different concurrency will be created when not match.
            </summary>
        </member>
        <member name="P:Weknow.ConcurrencyConfig.AutoIncrement">
            <summary>
            Gets or sets a value indicating whether [automatic increment].
            </summary>
            <value>
              <c>true</c> if [automatic increment]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Weknow.CypherAmbientLabelConfig">
            <summary>
            Label configuration
            </summary>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.#ctor(Weknow.CypherNamingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherAmbientLabelConfig"/> class.
            </summary>
            <param name="naming">The naming.</param>
        </member>
        <member name="P:Weknow.CypherAmbientLabelConfig.Values">
            <summary>
            Gets the additional ambient labels which will be added to cypher queries
            (when the expression is not hard-codded string).
            </summary>
        </member>
        <member name="P:Weknow.CypherAmbientLabelConfig.Formatter">
            <summary>
            Gets or sets the formatter label formatter.
            For example "`@{0}`"
            </summary>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Add(System.String[])">
            <summary>
            Adds the additional ambient labels which will be added to cypher queries.
            </summary>
            <param name="additionalLabels">The additional labels.</param>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Combine(System.String[])">
            <summary>
            Get combined label string with ambient and additional labels.
            </summary>
            <param name="additionalLabels">The labels.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Combine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get combined label string with ambient and additional labels.
            </summary>
            <param name="additionalLabels">The labels.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.AmbientFormat(System.String)">
            <summary>
            Ambients the format.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.FormatByConvention``1(``0)">
            <summary>
            Formats the specified text.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Weknow.CypherConfig">
            <summary>
            The cypher builder configuration.
            </summary>
        </member>
        <member name="M:Weknow.CypherConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherConfig"/> class.
            </summary>
        </member>
        <member name="P:Weknow.CypherConfig.AmbientLabels">
            <summary>
            Ambient Label configuration
            </summary>
        </member>
        <member name="P:Weknow.CypherConfig.Concurrency">
            <summary>
            Sets the concurrency behavior.
            </summary>
        </member>
        <member name="P:Weknow.CypherConfig.Naming">
            <summary>
            Gets the naming convention.
            </summary>
        </member>
        <member name="T:Weknow.CypherNamingConfig">
            <summary>
            Naming convention
            </summary>
        </member>
        <member name="M:Weknow.CypherNamingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherNamingConfig"/> class.
            </summary>
        </member>
        <member name="P:Weknow.CypherNamingConfig.Convention">
            <summary>
            Gets or sets the convention.
            </summary>
        </member>
        <member name="P:Weknow.CypherNamingConfig.ConventionAffects">
            <summary>
            Gets or sets the convention affects.
            </summary>
        </member>
        <member name="P:Weknow.CypherNamingConfig.Pluralization">
            <summary>
            Gets or sets the pluralization service.
            </summary>
        </member>
        <member name="M:Weknow.CypherNamingConfig.SetPluralization(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Sets the pluralization service.
            </summary>
            <param name="pluralize">The pluralize.</param>
            <param name="singularize">The singularize.</param>
        </member>
        <member name="M:Weknow.CypherNamingConfig.FormatByConvention(System.String,Weknow.CypherNamingConvention)">
            <summary>
            Formats by convention.
            </summary>
            <param name="text">The text.</param>
            <param name="convention">The convention.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherFormat">
            <summary>
            Cypher formatting options
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.SingleLine">
            <summary>
            A single line of cypher query
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.MultiLine">
            <summary>
            Multi line of cypher query
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.MultiLineDense">
            <summary>
            Multi line of cypher query with some density on where and set properties
            </summary>
        </member>
        <member name="T:Weknow.CypherNamingConvention">
            <summary>
            Formatting options
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.SCREAMING_CASE">
            <summary>
            The screaming case
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.CamelCase">
            <summary>
            The camel case
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.pacalCase">
            <summary>
            The pacal case
            </summary>
        </member>
        <member name="T:Weknow.NamingConventionAffects">
            <summary>
            What get affected by the naming convention
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.None">
            <summary>
            disable
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.Label">
            <summary>
            Node
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.Type">
            <summary>
            Relations
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Weknow.IPluralization">
            <summary>
            Pluralization services.
            </summary>
        </member>
        <member name="M:Weknow.IPluralization.Pluralize(System.String)">
            <summary>
            Pluralize a word using the service.
            </summary>
            <param name="word">The word to pluralize.</param>
            <returns>The pluralized word </returns>
        </member>
        <member name="M:Weknow.IPluralization.Singularize(System.String)">
            <summary>
            Singularize a word using the service.
            </summary>
            <param name="word">The word to singularize.</param>
            <returns>The singularized word.</returns>
        </member>
        <member name="T:Weknow.LambdaPluralization">
            <summary>
            Pluralization services.
            </summary>
        </member>
        <member name="M:Weknow.LambdaPluralization.#ctor(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.LambdaPluralization"/> class.
            </summary>
            <param name="pluralize">The pluralize.</param>
            <param name="singularize">The singularize.</param>
        </member>
        <member name="M:Weknow.LambdaPluralization.Pluralize(System.String)">
            <summary>
            Pluralize a word using the service.
            </summary>
            <param name="word">The word to pluralize.</param>
            <returns>The pluralized word </returns>
        </member>
        <member name="M:Weknow.LambdaPluralization.Singularize(System.String)">
            <summary>
            Singularize a word using the service.
            </summary>
            <param name="word">The word to singularize.</param>
            <returns>The singularized word.</returns>
        </member>
    </members>
</doc>
