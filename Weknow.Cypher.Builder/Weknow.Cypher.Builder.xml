<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.Cypher.Builder</name>
    </assembly>
    <members>
        <member name="T:Weknow.CypherBuilder.CypherAttribute">
            <summary>
            Cypher Attribute used to specify formatting pattern
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Weknow.CypherBuilder.CypherAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.CypherAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherAttribute.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherClauseAttribute">
            <summary>
            Cypher Clause indicator
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Weknow.CypherBuilder.ConstraintOptions">
            <summary>
            Constraint options
            </summary>
            <example>
            <![CDATA[
            CREATE FULLTEXT INDEX index_name
            FOR()-[r: KNOWS]-() ON EACH[r.info, r.note]
            OPTIONS
            {
                indexConfig: {
                    `fulltext.analyzer`: 'english',
                },
            }
            
            CREATE FULLTEXT INDEX index_name
            FOR()-[r: KNOWS]-() ON EACH[r.info, r.note]
            OPTIONS
            {
                indexConfig: {
                    `spatial.wgs-84.min`: [-100.0, -100.0],
                    `spatial.wgs-84.max`: [100.0, 100.0]    /// 
                },
                indexProvider: 'native-btree-1.0'
            }
            ]]>
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.ConstraintOptions.FulltextAnalyzer">
            <summary>
            Full-text analyzer.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.Parameters`1">
            <summary>
            Deconstruct for typed parameter of same type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Weknow.CypherBuilder.Parameters">
            <summary>
            Parameters factories
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.CreateMulti``1">
            <summary>
            Creates the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <example>
            <![CDATA[
            var (a, b, c, d) = Parameters.CreateMulti<Foo>();
            ]]>
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Create">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.CreateMulti">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Create``1">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.CreateMulti``2">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.CreateMulti``3">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.CreateMulti``4">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.CreateMulti``5">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.CreateMulti``6">
            <summary>
            Get parameters declaration.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.Parameters.Deconstructor">
            <summary>
            Parameters Deconstruction.
            </summary>
        </member>
        <member name="F:Weknow.CypherBuilder.Parameters.Deconstructor.Default">
            <summary>
            Parameters Deconstruction.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
            <param name="p9">The p9.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Parameters.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@,Weknow.CypherBuilder.Declarations.ParameterDeclaration@)">
            <summary>
            Parameters Deconstruction.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
            <param name="p9">The p9.</param>
            <param name="p10">The P10.</param>
        </member>
        <member name="T:Weknow.CypherBuilder.Variables`1">
            <summary>
            Deconstruct for typed variable of same type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Weknow.CypherBuilder.Variables">
            <summary>
            Variables factories
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.CreateMulti``1">
            <summary>
            Creates the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <example>
            <![CDATA[
            var (a, b, c, d) = Variables.CreateMulti<Foo>();
            ]]>
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Create">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.CreateMulti">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Create``1">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.CreateMulti``2">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.CreateMulti``3">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.CreateMulti``4">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.CreateMulti``5">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.CreateMulti``6">
            <summary>
            Get variables declaration.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.Variables.Deconstructor">
            <summary>
            Variables Deconstruction.
            </summary>
        </member>
        <member name="F:Weknow.CypherBuilder.Variables.Deconstructor.Default">
            <summary>
            Variables Deconstruction.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
            <param name="v9">The v9.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.Variables.Deconstructor.Deconstruct(Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@,Weknow.CypherBuilder.Declarations.VariableDeclaration@)">
            <summary>
            Variables Deconstruction.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
            <param name="v9">The v9.</param>
            <param name="v10">The P10.</param>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherCommand">
            <summary>
            <![CDATA[Representation of Cypher Query & Parameters]]>
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherCommand.#ctor(System.String,Weknow.CypherBuilder.CypherParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.CypherCommand"/> class.
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherCommand.Query">
            <summary>
            Representation of Cypher Query.
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherCommand.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherCommand.op_Implicit(Weknow.CypherBuilder.CypherCommand)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Weknow.CypherBuilder.CypherCommand"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="command">The command.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherCommand.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherCommand.Dump">
            <summary>
            <![CDATA[Dumps the Cypher Query & parameter into text format.]]>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherDelegates">
            <summary>
            Common delegate of the Cypher builder
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherDelegates.Fluent">
            <summary>
            Fluent delegate is the underline used to glue the Cypher expression.
            </summary>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherDelegates.FluentCase">
            <summary>
            Fluent Case delegate is the underline used to glue the CASE Cypher expression.
            </summary>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherDelegates.FluentCaseWhen">
            <summary>
            Fluent Case delegate is the underline used to glue the CASE Cypher expression.
            </summary>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherDelegates.Project`2">
            <summary>
            <![CDATA[Pattern delegate of T.
            Used for having IVar<T>]]>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherDelegates.NoVariable">
            <summary>
            Enable starting point which don't use any variable
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherDelegates.Project`1">
            <summary>
            <![CDATA[Pattern delegate of T.
            Used for having IVar]]>
            </summary>
            <typeparam name="R"></typeparam>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherExtensions">
            <summary>
            Cypher Extensions
            </summary>
            <summary>
            Cypher Function Extensions
            </summary>
            <summary>
            Cypher Extensions
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Match(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            <![CDATA[ MATCH (n:Person)-[:KNOWS]->(m:Person) ]]>
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Match(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.IPattern)">
            <summary>
            Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="patternattern">The patternattern.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example><![CDATA[ MATCH (n:Person)-[:KNOWS]->;(m:Person) ]]></example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OptionalMatch(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            Optional Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            OPTIONAL MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OptionalMatch(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.IPattern)">
            <summary>
            Matches phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
            <example>
            <![CDATA[ MATCH (n:Person)-[:KNOWS]->;(m:Person) ]]>
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Create(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            Create phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Create(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.IPattern)">
            <summary>
            Create phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pattern"></param>
            <returns></returns>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Merge(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            MERGE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pp"></param>
            <returns></returns>
            <example>
            MERGE (n:Person {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Merge(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.IPattern)">
            <summary>
            MERGE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
            <example>
            MERGE (n:Person {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnCreateSet(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.IRawCypher)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="cypher">
            Pure cypher injection.
            Should used for non-supported cypher extensions
            </param>
            <returns></returns>
            <example>
            .OnCreateSet(n, map)
            result in:
            ON CREATE SET n = map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnCreateSet(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSet(n, map)
            result in:
            ON CREATE SET n = map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnCreateSet(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSet(n, map)
            result in:
            ON CREATE SET n = $map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnCreateSet(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSet(n, new {prm._.Name, var._.Code})
            result in:
            ON CREATE SET n.Name = $Name, n.Code = prm.Code
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnCreateSetPlus(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSetPlus(n, map)
            result in:
            ON CREATE SET n += map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnCreateSetPlus(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            ON CREATE SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnCreateSetPlus(n, map)
            result in:
            ON CREATE SET n += $map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnMatchSet(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.IRawCypher)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="cypher">
            Pure cypher injection.
            Should used for non-supported cypher extensions
            </param>
            <returns></returns>
            <example>
            .OnMatchSet(n, map)
            result in:
            ON MATCH SET n = map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnMatchSet(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSet(n, map)
            result in:
            ON MATCH SET n = map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnMatchSet(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSet(n, map)
            result in:
            ON MATCH SET n = $map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnMatchSet(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSet(n, new {prm._.Name, var._.Code})
            result in:
            ON MATCH SET n.Name = $Name, n.Code = prm.Code
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnMatchSetPlus(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSetPlus(n, map)
            result in:
            ON MATCH SET n += map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OnMatchSetPlus(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            ON MATCH SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .OnMatchSetPlus(n, map)
            result in:
            ON MATCH SET n += $map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Set(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.ILabel[])">
            <summary>
            SET label.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <returns></returns>
            <example>
            SET n:Person:Manager
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Set(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var">The variable.</param>
            <param name="assignment">The complex.</param>
            <returns></returns>
            <example>
            .Set(n, map)
            result in:
            SET n = map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Set(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var"></param>
            <param name="assignment"></param>
            <returns></returns>
            <example>
            .Set(n, map)
            result in:
            SET n = $map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Set(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            SET  phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var">The variable.</param>
            <param name="assignment">The complex.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            .Set(n, new {prm._.Name, var._.Code})
            result in:
            SET n.Name = $Name, n.Code = prm.Code
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.SetPlus(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var">The variable.</param>
            <param name="assignment">The assignment.</param>
            <returns></returns>
            <example>
            .SetPlus(n, map)
            result in:
            SET n += map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.SetPlus(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="fluent">The fluent.</param>
            <param name="var">The variable.</param>
            <param name="assignment">The assignment.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            .SetPlus(n, map)
            result in:
            SET n += $map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Where(Weknow.CypherBuilder.CypherDelegates.Fluent,System.Boolean)">
            <summary>
            WHERE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="condition"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Return(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.ParamsFirst{System.Object})">
            <summary>
            RETURN phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The first variable.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            RETURN n
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Return(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            RETURN phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The first variable.</param>
            <param name="vars">Rest of the variables.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            RETURN n
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Return(Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            RETURN phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            RETURN
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.ReturnDistinct(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            RETURN DISTINCT phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The first variable.</param>
            <param name="vars">Rest of the variables.</param>
            <returns></returns>
            <example>
            RETURN DISTINCT n
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Union(Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            UNION phrase.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <example>
            MATCH (a)-[:KNOWS]->(b)
            RETURN b.name
            UNION
            MATCH (a)-[:LOVES]->(b)
            RETURN b.name
            
            Returns the distinct union of all query results. 
            Result column types and names have to match.
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.UnionAll(Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            UNION ALL phrase.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <example>
            MATCH (a)-[:KNOWS]->(b)
            RETURN b.name
            UNION ALL
            MATCH (a)-[:LOVES]->(b)
            RETURN b.name
            
            Returns the distinct union of all query results. 
            Result column types and names have to match.
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.With(Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            WITH phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            WITH user, count(friend) AS friends
            WHERE friends > 10
            RETURN user
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.With(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            WITH phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The first variable.</param>
            <param name="vars">Rest of the variables</param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WHERE user.name = $name
            WITH user, count(friend) AS friends
            WHERE friends > 10
            RETURN user
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Unwind``1(Weknow.CypherBuilder.CypherDelegates.Fluent,System.Collections.Generic.IEnumerable{``0},Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            UNWIND phrase.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p">The p.</param>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="next">The next statement.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Unwind``1(Weknow.CypherBuilder.CypherDelegates.Fluent,System.Collections.Generic.IEnumerable{``0},Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction)">
            <summary>
            UNWIND phrase.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p">The p.</param>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="next">The next statement.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Unwind(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Unwind``1(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration{``0},Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction{``0})">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Unwind(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.ParameterDeclaration,Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Unwind``1(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.ParameterDeclaration{``0},Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction{``0})">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Unwind(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="next">The next statement.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Unwind(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.ParameterDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            Unwinds the specified items.
            </summary>
            <param name="p">The p.</param>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="next">The next statement.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Foreach``1(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Collections.Generic.IEnumerable{``0},Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            FOREACH phrase.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prev">The previous.</param>
            <param name="item">The item.</param>
            <param name="items">The items.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            FOREACH $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Foreach(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            FOREACH phrase.
            </summary>
            <param name="prev">The previous.</param>
            <param name="item">The item.</param>
            <param name="items">The items.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            FOREACH $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Foreach(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            FOREACH phrase.
            </summary>
            <param name="prev">The previous.</param>
            <param name="item">The item.</param>
            <param name="items">The items.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            FOREACH $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OrderBy(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            ORDER BY phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The first variable.</param>
            <param name="vars">Rest of the variables</param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WITH user, count(friend) AS friends
            ORDER BY friends
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.OrderByDesc(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            ORDER BY DESC phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The first variable.</param>
            <param name="vars">Rest of the variables</param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            WITH user, count(friend) AS friends
            ORDER BY friends DESC
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Skip(Weknow.CypherBuilder.CypherDelegates.Fluent,System.Int32)">
            <summary>
            SKIP phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="count"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            SKIP 10
            LIMIT 5
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Skip(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            SKIP phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="count"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            SKIP 10
            LIMIT 5
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Limit(Weknow.CypherBuilder.CypherDelegates.Fluent,System.Int32)">
            <summary>
            LIMIT phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="count"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            SKIP 10
            LIMIT 5
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Limit(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            LIMIT phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="count"></param>
            <returns></returns>
            <example>
            MATCH (user)-[:FRIEND]-(friend)
            SKIP 10
            LIMIT 5
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Delete(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            DELETE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The first variable.</param>
            <param name="vars">Rest of the variables</param>
            <returns></returns>
            <example>
            DELETE n
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.DetachDelete(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            DETACH DELETE phrase.
            </summary>
            <param name="p">The p.</param>
            <param name="var">The first variable.</param>
            <param name="vars">Rest of the variables</param>
            <returns></returns>
            <example>
            DETACH DELETE n
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.WithRawCypher(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.RawCypher)">
            <summary>
            Pure cypher injection.
            Should used for non-supported cypher extensions
            </summary>
            <param name="p">previous part</param>
            <param name="cypher">The cypher.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Case(Weknow.CypherBuilder.CypherDelegates.Fluent,System.Object)">
            <summary>
            CASE WHEN ELSE END
            https://neo4j.com/docs/cypher-manual/5/syntax/expressions/
            </summary>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <example>
            <![CDATA[
            CASE n.eyes
              WHEN 'blue' THEN 1
              WHEN 'brown' THEN 2
              ELSE 3
            END
            ]]>  
            </example>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Case(Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            CASE WHEN ELSE END
            https://neo4j.com/docs/cypher-manual/5/syntax/expressions/
            </summary>
            <param name="p">The p.</param>
            <example>
            <![CDATA[ 
            CASE
                WHEN n.eyes = 'blue' THEN 1
                WHEN n.age< 40 THEN 2
                ELSE 3
            END   
            
            ---
            
            MATCH(n)-[r]->(m)
            RETURN
            CASE
              WHEN n:A&B THEN 1
              WHEN r:!R1&!R2 THEN 2
              ELSE -1
            END AS result   
            ]]>  
            </example>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Type(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            String representation of the relationship type.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)-[r:LOVE]->(m)
            RETURN type(r)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.StartNode(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Start node of the relationship.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)-[r:LOVE]->(m)
            RETURN startNode(r)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.EndNode(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            End node of the relationship.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)-[r:LOVE]->(m)
            RETURN endNode(r)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Id(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            The internal id of the relationship.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN id(n)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.type(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Labels of the node.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n:PERSON:ADMIN)
            RETURN labels(n)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Labels(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Labels of the node.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n:PERSON:ADMIN)
            RETURN labels(n)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Count(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Count the results.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN count(n)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.CountDistinct(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Count the results.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN count(n)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Collect(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            List from the values, ignores null.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            n.Collect() or Collect(n)
            result in:
            collect(n)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Collect(System.Object)">
            <summary>
            List from the values, ignores null.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
            <example>
            Collect(n._.Id)
            result in
            collect(n.Id)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.CollectDistinct(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            List from the values, ignores null.
            </summary>
            <param name="variable">The variable.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN collect(DISTINCT n)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.CollectDistinct(System.Object)">
            <summary>
            List from the values, ignores null.
            </summary>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN collect(DISTINCT n.PropA)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.Compare(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Compares the specified with.
            </summary>
            <param name="compare">The compare.</param>
            <param name="with">The with.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.In(System.Object,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            IN phrase.
            </summary>
            <param name="property">The property.</param>
            <param name="compareWith">The compare with.</param>
            <returns></returns>
            <example>
            In(n._.property, items)
            result in:
            n.property IN [items]
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.In(System.Object,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            IN phrase.
            </summary>
            <param name="property">The property.</param>
            <param name="compareWith">The compare with.</param>
            <returns></returns>
            <example>
            In(n._.property, items)
            result in:
            n.property IN [$items]
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherExtensions.In(System.Object,System.Object)">
            <summary>
            IN phrase.
            </summary>
            <param name="property">The property.</param>
            <param name="compareWith">The compare with.</param>
            <returns></returns>
            <example>
            var item = VariablesCreateMulti();
            In(n._.property, item.List)
            result in:
            n.property IN [item.List]
            </example>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherGeneralExtensions">
            <summary>
            Cypher Extensions
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherGeneralExtensions.As(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.String)">
            <summary>
            Define variable's alias
            </summary>
            <param name="var">The variable.</param>
            <param name="alias">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherGeneralExtensions.As(Weknow.CypherBuilder.CypherDelegates.Fluent,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Define variable's alias
            </summary>
            <param name="prv"></param>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherGeneralExtensions.As(Weknow.CypherBuilder.CypherDelegates.Fluent,System.Object)">
            <summary>
            Define variable's alias
            </summary>
            <param name="prv"></param>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherGeneralExtensions.As(System.Object,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Define variable's alias
            </summary>
            <param name="var">The variable.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherGeneralExtensions.As``1(Weknow.CypherBuilder.Declarations.VariableDeclaration{``0},System.String)">
            <summary>
            Define variable's alias
            </summary>
            <param name="var">The variable.</param>
            <param name="alias">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherGeneralExtensions.As``1(System.Object,Weknow.CypherBuilder.Declarations.VariableDeclaration{``0})">
            <summary>
            Define variable's alias
            </summary>
            <param name="var">The variable.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherInputCollectionAttribute">
            <summary>
            decorate object collection which are part of the Cypher Builder API,
            in order to avoid handling it as collection in the cypher output.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Weknow.CypherBuilder.CypherParameters">
            <summary>
            Cypher Parameters representation
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.CypherParameters"/> class.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.CypherParameters"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.AddIfEmpty``1(System.String,``0)">
            <summary>
            Adds parameter if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.AddRangeIfEmpty``1(System.String,``0[])">
            <summary>
            Adds parameters if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.AddRangeIfEmpty``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds parameters if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.AddOrUpdate``1(System.String,``0,System.Func{``0,System.Object})">
            <summary>
            Adds parameter or update.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="overrideMapping">
            Optional update decision mapping.
            If not exists the value will simply override 
            </param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.AddRangeOrUpdate``1(System.String,``0[])">
            <summary>
            Adds the range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.AddRangeOrUpdate``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object})">
            <summary>
            Adds the range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <param name="overrideMapping">
            Optional update decision mapping.
            If not exists the value will simply override 
            </param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.SetToNull(System.String)">
            <summary>
            Adds a null.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.TrySetToNull(System.String)">
            <summary>
            Adds a null.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.Remove(System.String)">
            <summary>
            Remove a key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherParameters.Get``1(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.CypherBuilder.ConstraintType">
            <summary>
            Behaviors of Ignore Context.
            </summary>
        </member>
        <member name="F:Weknow.CypherBuilder.ConstraintType.IsUnique">
            <summary>
            IS UNIQUE
            </summary>
        </member>
        <member name="F:Weknow.CypherBuilder.ConstraintType.IsNotNull">
            <summary>
            IS NOT NULL
            </summary>
        </member>
        <member name="F:Weknow.CypherBuilder.ConstraintType.IsNodeKey">
            <summary>
            IS NODE KEY
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.FullTextLanguage">
            <summary>
            Behaviors of Ignore Context.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.PropertyContextBehaviors">
            <summary>
            Behaviors of Ignore Context.
            </summary>
        </member>
        <member name="F:Weknow.CypherBuilder.PropertyContextBehaviors.None">
            <summary>
            Avoid this setting
            </summary>
        </member>
        <member name="F:Weknow.CypherBuilder.PropertyContextBehaviors.Plan">
            <summary>
            No formatting
            </summary>
        </member>
        <member name="F:Weknow.CypherBuilder.PropertyContextBehaviors.Dolar">
            <summary>
            No formatting except the $ sign.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.ICypher">
            <summary>
            Entry point for constructing root level Cypher.
            For fluent cypher check <see cref="T:Weknow.CypherBuilder.CypherExtensions" />
            </summary>
            <summary>
            Entry point for constructing root level Cypher.
            For fluent cypher check <see cref="T:Weknow.CypherBuilder.CypherExtensions" />
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Sum(System.Object)">
            <summary>
            Sum numerical values. Similar functions are avg(), min(), max().
            </summary>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN sum(n.PropA)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Max(System.Object)">
            <summary>
            Max numerical values. Similar functions are avg(), min(), sum().
            </summary>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN max(n.PropA)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Min(System.Object)">
            <summary>
            Min numerical values. Similar functions are avg(), sum(), max().
            </summary>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN min(n.PropA)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Avg(System.Object)">
            <summary>
            Avg numerical values. Similar functions are sum(), min(), max().
            </summary>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN avg(n.PropA)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.HandleConfigInjection(System.Action{Weknow.CypherConfig},Weknow.CypherConfig)">
            <summary>
            Handles the configuration injection.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="cfg">The CFG.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Init(Weknow.CypherConfig,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a builder.
            </summary>
            <param name="cfg">The CFG.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher._(System.Linq.Expressions.Expression{Weknow.CypherBuilder.CypherDelegates.NoVariable},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher._(System.Linq.Expressions.Expression{Weknow.CypherBuilder.CypherDelegates.Fluent},System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher._(System.Linq.Expressions.Expression,System.Action{Weknow.CypherConfig})">
            <summary>
            Build cypher expression
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.N">
            <summary>
            Specified node with label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.N(Weknow.CypherBuilder.ILabel)">
            <summary>
            Specified node with label.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.N(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Specified node with variable.
            </summary>
            <param name="var">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.N(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.ILabel)">
            <summary>
            Specified node with variable and label.
            </summary>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.N(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.ILabel,System.Object)">
            <summary>
            Specified node with variable, label and properties.
            </summary>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.ICypher.R">
            <summary>
            Gets the Cypher relation.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Rgx(System.Boolean)">
            <summary>
            Use regular expression comparison under WHERE clause.
            </summary>
            <param name="condition"></param>
            <returns></returns>
            <example>
            WHERE n.name =~ 'Tim.*'
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Rgx(System.Object)">
            <summary>
            Use regular expression comparison under WHERE clause.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            WHERE n.name =~ 'Tim.*'
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Profile">
            <summary>
            Profile execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Return">
            <summary>
            RETURN phrase.
            </summary>
            <returns></returns>
            <example>
            RETURN n
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Return(Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            RETURN phrase.
            </summary>
            <param name="var">The first variable.</param>
            <param name="vars">Rest of the variables.</param>
            <returns></returns>
            <example>
            RETURN n
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Match(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.INode)">
            <summary>
            Matches phrase.
            </summary>
            <param name="var">The variable.</param>
            <param name="n">The n.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            MATCH p = (n:Person)-[:KNOWS]-&gt;(m:Person)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Match(Weknow.CypherBuilder.INode)">
            <summary>
            Matches phrase.
            </summary>
            <param name="n">The n.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            MATCH (n:Person)-[:KNOWS]-&gt;(m:Person)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Match(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.INode[])">
            <summary>
            Matches phrase.
            </summary>
            <param name="n">The n.</param>
            <param name="rest">The rest.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            MATCH (n:Person)-[:KNOWS]-&gt;(m:Person)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.OptionalMatch(Weknow.CypherBuilder.INode)">
            <summary>
            Matches phrase.
            </summary>
            <param name="n">The n.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            MATCH (n:Person)-[:KNOWS]-&gt;(m:Person)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.OptionalMatch(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.INode[])">
            <summary>
            Matches phrase.
            </summary>
            <param name="n">The n.</param>
            <param name="rest">The rest.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            MATCH (n:Person)-[:KNOWS]-&gt;(m:Person)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Create(Weknow.CypherBuilder.IPattern)">
            <summary>
            Create phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Merge(Weknow.CypherBuilder.IPattern)">
            <summary>
            MERGE phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            MERGE (n:Person {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Set(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.ILabel[])">
            <summary>
            SET label.
            </summary>
            <param name="var">The variable.</param>
            <param name="label">The label.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            SET n:Person:Manager
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Set(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="var">The variable.</param>
            <param name="assignment">The complex.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            .Set(n, map)
            result in:
            SET n = map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Set(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            SET phrase.
            </summary>
            <param name="var">The variable.</param>
            <param name="assignment">The assignment.</param>
            <returns></returns>
            <example>
            .Set(n, map)
            result in:
            SET n = $map
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Set(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            SET  phrase.
            </summary>
            <param name="var">The variable.</param>
            <param name="assignment">The complex.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            .Set(n, new {prm._.Name, var._.Code})
            result in:
            SET n.Name = $Name, n.Code = prm.Code
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Unwind``1(System.Collections.Generic.IEnumerable{``0},Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Unwind``1(System.Collections.Generic.IEnumerable{``0},Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction{``0})">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Unwind(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Unwind``1(Weknow.CypherBuilder.Declarations.VariableDeclaration{``0},Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction{``0})">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Unwind(Weknow.CypherBuilder.Declarations.ParameterDeclaration,Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Unwind``1(Weknow.CypherBuilder.Declarations.ParameterDeclaration{``0},Weknow.CypherBuilder.CypherDelegates.FluentUnwindAction{``0})">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Unwind(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            UNWIND phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            UNWIND $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Unwind(Weknow.CypherBuilder.Declarations.ParameterDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            Unwinds the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Foreach``1(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Collections.Generic.IEnumerable{``0},Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            FOREACH phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            FOREACH $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Foreach(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            FOREACH phrase.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            FOREACH $names AS name
            MATCH(n { name: name})
            RETURN avg(n.age)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Foreach(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.ParameterDeclaration,Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            Foreachs the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="p">The p.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Exists(Weknow.CypherBuilder.CypherDelegates.Fluent)">
            <summary>
            EXISTS phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            exists(n.property)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Exists(Weknow.CypherBuilder.CypherDelegates.NoVariable)">
            <summary>
            EXISTS phrase.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <example>
            exists(n.property)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.CypherBuilder.IRelationNode}},System.Action{Weknow.CypherConfig})">
            <summary>
            Reuses the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.CypherBuilder.INodeRelation}},System.Action{Weknow.CypherConfig})">
            <summary>
            Reuses the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.CypherBuilder.INode}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{Weknow.CypherBuilder.IRelation}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.INodeRelation}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.INode}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IRelation}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.INode}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IRelation}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.INode}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IRelation}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.INode}}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Reuse(System.Linq.Expressions.Expression{System.Func{System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Func{Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IRelation}}}}}},System.Action{Weknow.CypherConfig})">
            <summary>
            Use for encapsulation of reusable expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Timestamp">
            <summary>
            Milliseconds since midnight, January 1, 1970 UTC.
            </summary>
            <returns></returns>
            <example>
            MATCH (n)
            RETURN timestamp()
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.FromRawCypher(Weknow.CypherBuilder.RawCypher)">
            <summary>
            Pure cypher injection.
            Should used for non-supported cypher extensions
            </summary>
            <param name="cypher">The cypher.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.RawCypher(Weknow.CypherBuilder.RawCypher)">
            <summary>
            Pure cypher injection.
            Should used for non-supported cypher extensions
            </summary>
            <param name="cypher">The cypher.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.DropConstraint(System.String)">
            <summary>
            Drop a index phrase.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.TryDropConstraint(System.String)">
            <summary>
            Drop a index phrase.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.CreateConstraint(System.String,Weknow.CypherBuilder.IPattern,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a index phrase.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.CreateConstraint(System.String,Weknow.CypherBuilder.ConstraintType,Weknow.CypherBuilder.IPattern,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a index phrase.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.TryCreateConstraint(System.String,Weknow.CypherBuilder.IPattern,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a index phrase.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.TryCreateConstraint(System.String,Weknow.CypherBuilder.ConstraintType,Weknow.CypherBuilder.IPattern,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a index phrase.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.DropIndex(System.String)">
            <summary>
            Drop a index phrase.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.TryDropIndex(System.String)">
            <summary>
            Drop a index phrase.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.CreateIndex(System.String,Weknow.CypherBuilder.IPattern,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a index phrase.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.CreateTextIndex(System.String,Weknow.CypherBuilder.IPattern,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a TEXT index on nodes with label Person and property name. 
            The property value type should be a string for the TEXT index. 
            Other value types are ignored by the TEXT index.
            TEXT index is utilized if the predicate compares the property with a string. 
            Note that for example:
            toLower(n.name) = 'Example String' 
            does not use an index.
            TEXT index is utilized to check the IN list checks, 
            when all elements in the list are strings.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.CreateFullTextIndex(System.String,Weknow.CypherBuilder.IPattern,Weknow.FullTextAnalyzer,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a full-text index on relationships with the name index_name and analyzer.
            Full-text indexes on relationships can only be used by from
            the procedure db.index.fulltext.queryRelationships.
            The other index settings will have their default values.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The p.</param>
            <param name="analyzer">The analyzer.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.TryCreateIndex(System.String,Weknow.CypherBuilder.IPattern,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a index phrase.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.TryCreateFullTextIndex(System.String,Weknow.CypherBuilder.IPattern,Weknow.FullTextAnalyzer,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a index phrase.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The p.</param>
            <param name="analyzer">The analyzer.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.TryCreateTextIndex(System.String,Weknow.CypherBuilder.IPattern,Weknow.CypherBuilder.ParamsFirst{System.Object},System.Object[])">
            <summary>
            Create a TEXT index on nodes with label Person and property name.
            The property value type should be a string for the TEXT index.
            Other value types are ignored by the TEXT index.
            TEXT index is utilized if the predicate compares the property with a string.
            Note that for example:
            toLower(n.name) = 'Example String'
            does not use an index.
            TEXT index is utilized to check the IN list checks,
            when all elements in the list are strings.
            </summary>
            <param name="name">The name.</param>
            <param name="p">The p.</param>
            <param name="var">The variable.</param>
            <param name="vars">The vars.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            CREATE (n {name: $value})
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Nodes(System.Object)">
            <summary>
            Returns a list containing all the nodes in a path.
            https://neo4j.com/docs/cypher-manual/5/functions/list/#functions-nodes
            </summary>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH p = (a)-->(b)-->(c)
            WHERE a.name = 'Alice' AND c.name = 'Eskil'
            RETURN nodes(p)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Relationships(System.Object)">
            <summary>
            returns a list containing all the relationships in a path.
            https://neo4j.com/docs/cypher-manual/5/functions/list/#functions-relationships
            </summary>
            <param name="prop">The property.</param>
            <returns></returns>
            <example>
            MATCH p = (a)-->(b)-->(c)
            WHERE a.name = 'Alice' AND c.name = 'Eskil'
            RETURN relationships(p)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Case(System.Object)">
            <summary>
            CASE WHEN ELSE END
            https://neo4j.com/docs/cypher-manual/5/syntax/expressions/
            </summary>
            <param name="var">The variable.</param>
            <example>
            <![CDATA[
            CASE n.eyes
              WHEN 'blue' THEN 1
              WHEN 'brown' THEN 2
              ELSE 3
            END 
            ]]>  
            </example>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ICypher.Case">
            <summary>
            CASE WHEN ELSE END
            https://neo4j.com/docs/cypher-manual/5/syntax/expressions/
            </summary>
            <example>
            <![CDATA[
            CASE
                WHEN n.eyes = 'blue' THEN 1
                WHEN n.age< 40 THEN 2
                ELSE 3
            END   
            
            ---
            
            MATCH(n)-[r]->(m)
            RETURN
            CASE
              WHEN n:A&B THEN 1
              WHEN r:!R1&!R2 THEN 2
              ELSE -1
            END AS result   
            ]]>  
            </example>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Weknow.CypherBuilder.ParamsFirst`1">
            <summary>
            Use to avoid empty params array
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.ExpressionPattern">
            <summary>
            Represent predefine pattern
            </summary>
            <seealso cref="T:Weknow.CypherBuilder.IPattern" />
        </member>
        <member name="M:Weknow.CypherBuilder.ExpressionPattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.ExpressionPattern"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.ExpressionPattern.op_Implicit(Weknow.CypherBuilder.ExpressionPattern)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Weknow.CypherBuilder.ExpressionPattern"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ExpressionPattern.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.INode">
            <summary>
            Pattern primitive for the Cypher expression.
            </summary>
            <example>
            The line and arrows in the following expression are patterns operations. 
            MATCH (n)-[r]->(m)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.CypherBuilder.INode.Fake">
            <summary>
            Creates a mock object's node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INode.op_Subtraction(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.IRelationNode)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INode.op_Subtraction(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.INode)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INode.op_Subtraction(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.IRelation)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INode.op_GreaterThan(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.INode)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INode.op_GreaterThan(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.IRelation)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INode.op_LessThan(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.INode)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INode.op_LessThan(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.IRelation)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.INodeRelation">
            <summary>
            Represent node to relation
            </summary>
            <seealso cref="T:Weknow.CypherBuilder.IPattern" />
        </member>
        <member name="M:Weknow.CypherBuilder.INodeRelation.op_GreaterThan(Weknow.CypherBuilder.INodeRelation,Weknow.CypherBuilder.INode)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INodeRelation.op_LessThan(Weknow.CypherBuilder.INodeRelation,Weknow.CypherBuilder.INode)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INodeRelation.op_Subtraction(Weknow.CypherBuilder.INodeRelation,Weknow.CypherBuilder.INodeRelation)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INodeRelation.op_GreaterThan(Weknow.CypherBuilder.INodeRelation,Weknow.CypherBuilder.INodeRelation)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.INodeRelation.op_LessThan(Weknow.CypherBuilder.INodeRelation,Weknow.CypherBuilder.INodeRelation)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.IPattern">
            <summary>
            Pattern primitive for the Cypher expression.
            </summary>
            <example>
            The line and arrows in the following expression are patterns operations. 
            MATCH (n)-[r]->(m)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="T:Weknow.CypherBuilder.IRawCypher">
            <summary>
            Pure cypher injection.
            Should used for non-supported cypher extensions
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.IRelationNode">
            <summary>
            Represent relation to node
            </summary>
            <seealso cref="T:Weknow.CypherBuilder.IPattern" />
        </member>
        <member name="M:Weknow.CypherBuilder.IRelationNode.op_GreaterThan(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.IRelationNode)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.IRelationNode.op_LessThan(Weknow.CypherBuilder.INode,Weknow.CypherBuilder.IRelationNode)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.NodePattern">
            <summary>
            Represent predefine pattern
            </summary>
            <seealso cref="T:Weknow.CypherBuilder.IPattern" />
        </member>
        <member name="M:Weknow.CypherBuilder.NodePattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Weknow.CypherBuilder.NodeRelationPattern">
            <summary>
            Represent node to relation
            </summary>
            <seealso cref="T:Weknow.CypherBuilder.ExpressionPattern" />
            <seealso cref="T:Weknow.CypherBuilder.INodeRelation" />
        </member>
        <member name="M:Weknow.CypherBuilder.NodeRelationPattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.RawCypher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.RawCypher"/> class.
            </summary>
            <param name="cypher">The cypher.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.RawCypher.op_Implicit(System.String)~Weknow.CypherBuilder.RawCypher">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Weknow.CypherBuilder.RawCypher"/>.
            </summary>
            <param name="cypher">The cypher.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.RawCypher.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.RelationNodePattern">
            <summary>
            Represent relation to node
            </summary>
            <seealso cref="T:Weknow.CypherBuilder.ExpressionPattern" />
            <seealso cref="T:Weknow.CypherBuilder.IRelationNode" />
        </member>
        <member name="M:Weknow.CypherBuilder.RelationNodePattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Weknow.CypherBuilder.IRelation">
            <summary>
            Relation primitive for the Cypher expression.
            </summary>
            <example>
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.CypherBuilder.IRelation.Fake">
            <summary>
            Creates a mock object's node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.IType)">
            <summary>
            Represent relation with variable and type.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="type">The type.</param>
            <returns></returns>
            <example><![CDATA[(m)<-[r:KNOWS]-(n)]]></example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Represent relation with variable and type.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation" />.
            </value>
            <param name="var">The variable.</param>
            <returns></returns>
            <example><![CDATA[(m)<-[r:KNOWS]-(n)]]></example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IType)">
            <summary>
            Represent relation with variable and type.
            </summary>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <returns></returns>
            <example>
            <![CDATA[(m)<-[r:KNOWS]-(n)]]>
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IType,System.Object)">
            <summary>
            Represent relation with variable, type and properties.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example>
            <![CDATA[(m)<-[r:KNOWS {name: $name}]-(n)]]>
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.IType,System.Object)">
            <summary>
            Represent relation with variable, type and properties.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation" />.
            </value>
            <param name="type">The type.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <example><![CDATA[(m)<-[r:KNOWS {name: $name}]-(n)]]></example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(System.Range)">
            <summary>
            Represent relation with range.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Range)">
            <summary>
            Represent relation with variable and range.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.Rng)">
            <summary>
            Represent relation with range.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Rng)">
            <summary>
            Represent relation with variable and range.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:*1..5]->(m)
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.IRelation.Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IType,System.Object,Weknow.CypherBuilder.Rng)">
            <summary>
            Represent relation with variable, type and range.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">Variable</param>
            <param name="type"></param>
            <param name="properties"></param>
            <param name="r">The range: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges </param>
            <returns></returns>
            <example>
            (n)-[r:KNOW*1..5 {level: 2}]->(m)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.IRelation.op_Subtraction(Weknow.CypherBuilder.IRelation,Weknow.CypherBuilder.INode)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.IRelation.op_Subtraction(Weknow.CypherBuilder.IRelation,Weknow.CypherBuilder.IRelation)">
            <summary>
            Declaration for operator -.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.IRelation.op_GreaterThan(Weknow.CypherBuilder.IRelation,Weknow.CypherBuilder.INode)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.IRelation.op_GreaterThan(Weknow.CypherBuilder.IRelation,Weknow.CypherBuilder.IRelation)">
            <summary>
            Declaration for operator &gt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.IRelation.op_LessThan(Weknow.CypherBuilder.IRelation,Weknow.CypherBuilder.INode)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.IRelation.op_LessThan(Weknow.CypherBuilder.IRelation,Weknow.CypherBuilder.IRelation)">
            <summary>
            Declaration for operator &lt;.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.RelationPattern">
            <summary>
            Represent predefine pattern
            </summary>
            <seealso cref="T:Weknow.CypherBuilder.IPattern" />
        </member>
        <member name="M:Weknow.CypherBuilder.RelationPattern.#ctor(System.Linq.Expressions.Expression,Weknow.CypherConfig)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="expression">The expression.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation" /> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation" />.
            </value>
            <param name="var">The variable.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(Weknow.CypherBuilder.IType,System.Object)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation" /> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation" />.
            </value>
            <param name="type">The type.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Rng)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation"/> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(Weknow.CypherBuilder.Rng)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation"/> with the specified r.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IType,System.Object,Weknow.CypherBuilder.Rng)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation"/> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <param name="properties">The properties.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Range)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation"/> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(System.Range)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation"/> with the specified r.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IType)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation"/> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Weknow#CypherBuilder#IRelation#Item(Weknow.CypherBuilder.IType)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation"/> with the specified type.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.RelationPattern.Item(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.IType,System.Object,Weknow.CypherBuilder.Rng)">
            <summary>
            Gets the <see cref="T:Weknow.CypherBuilder.IRelation"/> with the specified variable.
            </summary>
            <value>
            The <see cref="T:Weknow.CypherBuilder.IRelation"/>.
            </value>
            <param name="var">The variable.</param>
            <param name="type">The type.</param>
            <param name="properties">The properties.</param>
            <param name="r">The r.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Weknow.CypherBuilder.Rng">
            <summary>
            Represent alternative to range syntax (currently the range syntax is not supported as expression)
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Rng.Any">
            <summary>
            Any length
            </summary>
            <example>
            (a)-[*]->(b)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Rng.AtLeast(System.Int32)">
            <summary>
            At least
            </summary>
            <param name="i">The i.</param>
            <example>
            (a)-[*3..]->(b)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Rng.AtMost(System.Int32)">
            <summary>
            At most
            </summary>
            <param name="i">The i.</param>
            <example>
            (a)-[*..5]->(b)
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Rng.Scope(System.Int32,System.Int32)">
            <summary>
            From start index to end index.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
            <example>
            (a)-[*3..5]->(b)
            </example>
        </member>
        <member name="T:Weknow.CypherBuilder.ILabel">
            <summary>
            Label primitive for the Cypher expression.
            </summary>
            <example>
            The Person in the following expression will use the Label primitive.
            MATCH (n:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.CypherBuilder.ILabel.Fake">
            <summary>
            Creates a mock object's label.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.ILabel.R">
            <summary>
            Use Label as a relation
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.ILabel.op_BitwiseAnd(Weknow.CypherBuilder.ILabel,Weknow.CypherBuilder.ILabel)">
            <summary>
            Implements the operator &amp;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
            <example><![CDATA[(n:Person:Animal)]]></example>
        </member>
        <member name="T:Weknow.CypherBuilder.IType">
            <summary>
            Relation's Type primitive for the Cypher expression.
            </summary>
            <example>
            The KNOWS in the following expression will use the Type primitive.
            MATCH (n:Person)-[:KNOWS]->(m:Person)
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.CypherBuilder.IType.Fake">
            <summary>
            Creates a mock object's type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.IType.op_BitwiseOr(Weknow.CypherBuilder.IType,Weknow.CypherBuilder.IType)">
            <summary>
            Implements the operator |.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
            <example><![CDATA[(n)-[:KNOWS|LOVES]->(m)]]></example>
        </member>
        <member name="M:Weknow.CypherBuilder.IType.op_BitwiseAnd(Weknow.CypherBuilder.IType,Weknow.CypherBuilder.IType)">
            <summary>
            <![CDATA[Implements the operator &.]]>
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
            <example><![CDATA[(n)-[:KNOWS&LOVES]->(m)]]></example>
        </member>
        <member name="M:Weknow.CypherBuilder.IType.op_LogicalNot(Weknow.CypherBuilder.IType)">
            <summary>
            Implements the operator !.
            </summary>
            <param name="a">a.</param>
            <returns>
            The result of the operator.
            </returns>
            <example><![CDATA[(n)-[:!KNOWS]->(m)]]></example>
        </member>
        <member name="T:Weknow.CypherBuilder.Declarations.ParameterDeclaration">
            <summary>
            Parameter primitive for the Cypher expression.
            </summary>
            <example>
            The $value in the following expression will use the Parameter primitive.
            CREATE (n:Person {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.CypherBuilder.Declarations.ParameterDeclaration.Default">
            <summary>
            Default (and only) way to get cypher parameter.
            It use under expression and don't need a real implementation;
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration._``1">
            <summary>
            Gets type representation of the parameter. 
            </summary>
            <example>
            <![CDATA[
            Merge(N(n, Person, new { m._<Foo>.Id })))
            will result in
            MERGE (n:Person {{ Id: $Id }})
            ]]>
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_UnaryPlus(Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            Declaration for operator +.
            </summary>
            <param name="prm">The PRM.</param>
            <returns>
            The result of the operator.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_Equality(System.Object,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            Declaration for operator ==.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_Inequality(System.Object,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            Declaration for operator !=.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_Equality(Weknow.CypherBuilder.Declarations.ParameterDeclaration,System.Object)">
            <summary>
            Declaration for operator ==.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_Inequality(Weknow.CypherBuilder.Declarations.ParameterDeclaration,System.Object)">
            <summary>
            Declaration for operator !=.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_GreaterThan(Weknow.CypherBuilder.Declarations.ParameterDeclaration,System.Object)">
            <summary>
            <![CDATA[Declaration for operator >.]]>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_LessThan(Weknow.CypherBuilder.Declarations.ParameterDeclaration,System.Object)">
            <summary>
            <![CDATA[Declaration for operator <.]]>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_GreaterThan(System.Object,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            <![CDATA[Declaration for operator >.]]>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration.op_LessThan(System.Object,Weknow.CypherBuilder.Declarations.ParameterDeclaration)">
            <summary>
            <![CDATA[Declaration for operator <.]]>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.Declarations.ParameterDeclaration`1">
            <summary>
            Parameter primitive for the Cypher expression.
            </summary>
            <example>
            The $value in the following expression will use the Parameter primitive.
            CREATE (n:Person {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.CypherBuilder.Declarations.ParameterDeclaration`1.Default">
            <summary>
            Default (and only) way to get cypher parameter.
            It use under expression and don't need a real implementation;
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.ParameterDeclaration`1.__">
            <summary>
            Gets type representation of the variable. while preserving the path to the parameter
            </summary>
            <example>
            <![CDATA[
            Merge(N(n, Person, new { map.__.Id }))
            will result in
            MERGE (n:Person {{ Id: $map.Id }})
            ]]>
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.ParameterDeclaration`1._">
            <summary>
            Gets type representation of the variable. without preserving the path to the parameter
            </summary>
            <example>
            <![CDATA[
            Merge(N(n, Person, new { map._.Id }))
            will result in
            MERGE (n:Person {{ Id: $Id }})
            ]]>
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration`1.op_Implicit(Weknow.CypherBuilder.Declarations.ParameterDeclaration{`0})~`0">
            <summary>
            Casting overload.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.ParameterDeclaration`1.op_OnesComplement(Weknow.CypherBuilder.Declarations.ParameterDeclaration{`0})">
            <summary>
            Use the parameter as prefix
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.Declarations.VariableDeclaration`1">
            <summary>
            Variable primitive for the Cypher expression.
            </summary>
            <typeparam name="T"></typeparam>
            <example>
            The n in the following expression will use the variable primitive. 
            CREATE (n {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.CypherBuilder.Declarations.VariableDeclaration`1.Default">
            <summary>
            Default (and only) way to get cypher variable.
            It use under expression and don't need a real implementation;
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.VariableDeclaration`1._">
            <summary>
            Gets type representation of the variable.
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.VariableDeclaration`1.__">
            <summary>
            Gets type representation of the variable. while preserving the path.
            </summary>
            <example>
            <![CDATA[
            Unwind(items, map,
            Merge(N(n, Person, new { map.__.Id })))
            will result in
            UNWIND $items AS map
            MERGE (n:Person {{ Id: map.Id }})
            ]]>
            </example>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.VariableDeclaration`1.Inc">
            <summary>
            Gets type representation of the variable which should be increment.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration`1.op_OnesComplement(Weknow.CypherBuilder.Declarations.VariableDeclaration{`0})">
            <summary>
            Use the parameter as prefix
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.VariableDeclaration`1.AsParameter">
            <summary>
            Cast to parameter type.
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.VariableDeclaration`1.Prm">
            <summary>
            Cast to parameter type.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.Declarations.VariableDeclaration">
            <summary>
            Variable primitive for the Cypher expression.
            </summary>
            <example>
            The n in the following expression will use the variable primitive. 
            CREATE (n {name: $value})
            </example>
            <remarks>
            Primitives don't have actual implementation, 
            it's a declarative unit which will be evaluate at parsing time (by the visitor). 
            </remarks>
        </member>
        <member name="F:Weknow.CypherBuilder.Declarations.VariableDeclaration.Default">
            <summary>
            Default (and only) way to get cypher parameter.
            It use under expression and don't need a real implementation;
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration._``1">
            <summary>
            Gets type representation of the variable. 
            </summary>
            <example>
            <![CDATA[
            Unwind(items, map,
            Merge(N(n, Person, new { map._<Foo>.Id })))
            will result in
            UNWIND $items AS map
            MERGE (n:Person {{ Id: Id }})
            ]]>
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.__``1">
            <summary>
            Gets type representation of the variable. while preserving the path.
            </summary>
            <example>
            <![CDATA[
            Unwind(items, map,
            Merge(N(n, Person, new { map.__<Foo>.Id })))
            will result in
            UNWIND $items AS map
            MERGE (n:Person {{ Id: map.Id }})
            ]]>
            </example>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_Equality(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            Declaration for operator ==.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_Inequality(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            Declaration for operator !=.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_Equality(System.Object,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Declaration for operator ==.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_Inequality(System.Object,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Declaration for operator !=.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_GreaterThan(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            <![CDATA[Declaration for operator >.]]>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_LessThan(Weknow.CypherBuilder.Declarations.VariableDeclaration,System.Object)">
            <summary>
            <![CDATA[Declaration for operator <.]]>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_GreaterThan(System.Object,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            <![CDATA[Declaration for operator >.]]>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_LessThan(System.Object,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            <![CDATA[Declaration for operator <.]]>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_Addition(Weknow.CypherBuilder.Declarations.VariableDeclaration,Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Declaration for operator +.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.Declarations.VariableDeclaration.op_UnaryPlus(Weknow.CypherBuilder.Declarations.VariableDeclaration)">
            <summary>
            Declaration for unary operator +.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.VariableDeclaration.AsParameter">
            <summary>
            Cast to parameter type.
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.Declarations.VariableDeclaration.Prm">
            <summary>
            Cast to parameter type.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherQueryBuilder">
            <summary>
            Responsible for abstracting the logic of the actual 
            Cypher text building.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherQueryBuilder.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Char"/> at the specified index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherQueryBuilder.Item(System.Int32,System.Int32)">
            <summary>
            <![CDATA[Gets the <see cref="ReadOnlySpan{System.Char}" /> with the specified start index.]]>
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherQueryBuilder.Item(System.Range)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified range.
            </summary>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.Append``1(``0)">
            <summary>
            Appends text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the specified start index.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.Remove(System.Range)">
            <summary>
            Removes the specified range.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherQueryBuilder.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.ToString(System.Range)">
            <summary>
            Converts to string.
            </summary>
            <param name="range">The range.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets the range.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherQueryBuilder.Deconstruct(System.Range,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct the range.
            </summary>
            <param name="range">The range.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherVisitor">
            <summary>
            The cypher visitor is the heart of the ORM implementation
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.#ctor(Weknow.CypherConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.CypherVisitor"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherVisitor.Query">
            <summary>
            Mutable state of the cypher query.
            Query build during the visitor traverse.
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.CypherVisitor.Parameters">
            <summary>
            Mutable state of the parameters.
            Parameters build during the visitor traverse.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.ApplyFormat(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>
            Applies the format.
            </summary>
            <param name="node">The node.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.EqualPattern">
            <summary>
            Determines whether [is equal pattern].
            </summary>
            <returns>
              <c>true</c> if [is equal pattern]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.CypherVisitor.AppendPropSeparator">
            <summary>
            Appends the property separator.
            </summary>
        </member>
        <member name="T:Weknow.CypherBuilder.CypherVisitor.AmbientContextStack">
            <summary>
            Should handle ambient stack
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Weknow.CypherBuilder.ContextValue`1">
            <summary>
            Context container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Weknow.CypherBuilder.ContextValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.ContextValue`1"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Weknow.CypherBuilder.ContextValue`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Weknow.CypherBuilder.ContextValue`1.Values">
            <summary>
            Gets all values.
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.ContextValue`1.Set(`0)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ContextValue`1.Set(`0,System.Boolean)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ContextValue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ContextValue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.CypherBuilder.ContextValue`1.op_Implicit(Weknow.CypherBuilder.ContextValue{`0})~`0">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Weknow.CypherBuilder.DisposeableAction">
            <summary>
            Dispose-able action
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Weknow.CypherBuilder.DisposeableAction.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="M:Weknow.CypherBuilder.DisposeableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherBuilder.DisposeableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Weknow.CypherBuilder.DisposeableAction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Weknow.CypherAmbientLabelConfig">
            <summary>
            Label configuration
            </summary>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.#ctor(Weknow.CypherConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherAmbientLabelConfig" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:Weknow.CypherAmbientLabelConfig.Values">
            <summary>
            Gets the additional ambient labels which will be added to cypher queries
            (when the expression is not hard-codded string).
            </summary>
        </member>
        <member name="P:Weknow.CypherAmbientLabelConfig.Formatter">
            <summary>
            Gets or sets the formatter label formatter.
            For example "`@{0}`"
            </summary>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Add(Weknow.CypherBuilder.ILabel,System.String)">
            <summary>
            Adds the additional ambient labels which will be added to cypher queries.
            </summary>
            <param name="label">The label.</param>
            <param name="name">Automatic parameter, should be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Add(System.String[])">
            <summary>
            Adds the additional ambient labels which will be added to cypher queries.
            </summary>
            <param name="additionalLabels">The additional labels.</param>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Combine(System.String[])">
            <summary>
            Get combined label string with ambient and additional labels.
            </summary>
            <param name="additionalLabels">The labels.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.Combine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get combined label string with ambient and additional labels.
            </summary>
            <param name="additionalLabels">The labels.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.AmbientFormat(System.String)">
            <summary>
            Ambients the format.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.FormatByConvention``1(``0)">
            <summary>
            Formats the specified text.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:Weknow.CypherAmbientLabelConfig.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Weknow.CypherAmbientLabelConfig.Parent">
            <summary>
            Gets the parent configuration.
            </summary>
        </member>
        <member name="T:Weknow.CypherConfig">
            <summary>
            The cypher builder configuration.
            </summary>
        </member>
        <member name="F:Weknow.CypherConfig.Scope">
            <summary>
            Using async configuration scope
            </summary>
        </member>
        <member name="M:Weknow.CypherConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherConfig"/> class.
            </summary>
        </member>
        <member name="P:Weknow.CypherConfig.AmbientLabels">
            <summary>
            Ambient Label configuration
            </summary>
        </member>
        <member name="P:Weknow.CypherConfig.Naming">
            <summary>
            Gets the naming convention.
            </summary>
        </member>
        <member name="P:Weknow.CypherConfig.Flavor">
            <summary>
            The cypher flavor.
            </summary>
        </member>
        <member name="T:Weknow.CypherFlavor">
            <summary>
            Cypher Flavor
            </summary>
        </member>
        <member name="F:Weknow.CypherFlavor.OpenCypher">
            <summary>
            use compatible open cypher
            https://opencypher.org/
            </summary>
        </member>
        <member name="F:Weknow.CypherFlavor.Neo4j5">
            <summary>
            use neo4j 5 compatible cypher
            https://neo4j.com/docs/cypher-cheat-sheet/current/
            </summary>
        </member>
        <member name="T:Weknow.CypherNamingConfig">
            <summary>
            Naming convention
            </summary>
        </member>
        <member name="M:Weknow.CypherNamingConfig.#ctor(Weknow.CypherConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.CypherNamingConfig"/> class.
            </summary>
        </member>
        <member name="P:Weknow.CypherNamingConfig.LabelConvention">
            <summary>
            Gets or sets the label's convention.
            </summary>
        </member>
        <member name="P:Weknow.CypherNamingConfig.TypeConvention">
            <summary>
            Gets or sets the type's convention.
            </summary>
        </member>
        <member name="M:Weknow.CypherNamingConfig.ConvertToTypeConvention(System.String)">
            <summary>
            Converts to type convention.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherNamingConfig.Pluralization">
            <summary>
            Gets or sets the pluralization service.
            </summary>
        </member>
        <member name="M:Weknow.CypherNamingConfig.SetPluralization(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Sets the pluralization service.
            </summary>
            <param name="pluralize">The pluralize.</param>
            <param name="singularize">The singularize.</param>
        </member>
        <member name="M:Weknow.CypherNamingConfig.FormatByConvention(System.String,Weknow.CypherNamingConvention)">
            <summary>
            Formats by convention.
            </summary>
            <param name="text">The text.</param>
            <param name="convention">The convention.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.CypherNamingConfig.Parent">
            <summary>
            Gets the parent configuration.
            </summary>
        </member>
        <member name="T:Weknow.CypherFormat">
            <summary>
            Cypher formatting options
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.SingleLine">
            <summary>
            A single line of cypher query
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.MultiLine">
            <summary>
            Multi line of cypher query
            </summary>
        </member>
        <member name="F:Weknow.CypherFormat.MultiLineDense">
            <summary>
            Multi line of cypher query with some density on where and set properties
            </summary>
        </member>
        <member name="T:Weknow.CypherNamingConvention">
            <summary>
            Formatting options
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.SCREAMING_CASE">
            <summary>
            The screaming case
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.camelCase">
            <summary>
            The camel case
            </summary>
        </member>
        <member name="F:Weknow.CypherNamingConvention.PacalCase">
            <summary>
            The pacal case
            </summary>
        </member>
        <member name="T:Weknow.FullTextAnalyzer">
            <summary>
            Full text search analyzer options
            </summary>
        </member>
        <member name="T:Weknow.NamingConventionAffects">
            <summary>
            What get affected by the naming convention
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.None">
            <summary>
            disable
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.Label">
            <summary>
            Node
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.Type">
            <summary>
            Relations
            </summary>
        </member>
        <member name="F:Weknow.NamingConventionAffects.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Weknow.IPluralization">
            <summary>
            Pluralization services.
            </summary>
        </member>
        <member name="M:Weknow.IPluralization.Pluralize(System.String)">
            <summary>
            Pluralize a word using the service.
            </summary>
            <param name="word">The word to pluralize.</param>
            <returns>The pluralized word </returns>
        </member>
        <member name="M:Weknow.IPluralization.Singularize(System.String)">
            <summary>
            Singularize a word using the service.
            </summary>
            <param name="word">The word to singularize.</param>
            <returns>The singularized word.</returns>
        </member>
        <member name="T:Weknow.LambdaPluralization">
            <summary>
            Pluralization services.
            </summary>
        </member>
        <member name="M:Weknow.LambdaPluralization.#ctor(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.LambdaPluralization"/> class.
            </summary>
            <param name="pluralize">The pluralize.</param>
            <param name="singularize">The singularize.</param>
        </member>
        <member name="M:Weknow.LambdaPluralization.Pluralize(System.String)">
            <summary>
            Pluralize a word using the service.
            </summary>
            <param name="word">The word to pluralize.</param>
            <returns>The pluralized word </returns>
        </member>
        <member name="M:Weknow.LambdaPluralization.Singularize(System.String)">
            <summary>
            Singularize a word using the service.
            </summary>
            <param name="word">The word to singularize.</param>
            <returns>The singularized word.</returns>
        </member>
    </members>
</doc>
