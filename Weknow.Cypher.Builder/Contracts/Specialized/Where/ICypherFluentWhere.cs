// https://neo4j.com/docs/cypher-refcard/current/
// https://github.com/Readify/Neo4jClient
// https://github.com/Readify/Neo4jClient/wiki/cypher-examples
// https://neo4jmapper.tk/guide.html
// https://github.com/barnardos-au/Neo4jMapper

using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace Weknow
{

    /// <summary>
    /// Where phrase composing options 
    /// </summary>
    public interface ICypherFluentWhere 
    {
        /// <summary>
        /// Create WHERE phrase
        /// </summary>
        /// <param name="statement">The statement.</param>
        /// <returns></returns>
        /// <example>
        /// WHERE n.property <> $value
        /// </example>
        ICypherFluentWhereExpression Where(string statement);

        /// <summary>
        /// Create WHERE phrase
        /// </summary>
        /// <param name="variable">The variable.</param>
        /// <param name="name">The name.</param>
        /// <param name="moreNames">The more names.</param>
        /// <returns></returns>
        ICypherFluentWhereExpression Where(string variable, string name, params string[] moreNames);

        /// <summary>
        /// Create WHERE phrase
        /// </summary>
        /// <param name="variable">The variable.</param>
        /// <param name="propNames">The property names.</param>
        /// <returns></returns>
        ICypherFluentWhereExpression Where(string variable, string name, IEnumerable<string> moreNames);

        /// <summary>
        /// Create WHERE phrase, generated by expression
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="propExpression">The property expression.</param>
        /// <param name="compareSign">The compare sign.</param>
        /// <returns></returns>
        /// <example>
        /// Where ((User user) => user.Id))
        /// Result with
        /// WHERE user.Id = $Id
        /// 
        /// Where ((User user) => user.Id), ">")
        /// Result with
        /// WHERE user.Id > $Id AND
        /// </example>
        ICypherFluentWhereExpression Where<T>(
                    Expression<Func<T, dynamic>> propExpression,
                    string compareSign = "=");
    }
}
