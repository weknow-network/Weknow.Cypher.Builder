<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.GraphDbClient.Neo4j</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.RegistrationOfN4jProvider">
            <summary>
            Neo4j scoped DI 
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RegistrationOfN4jProvider.RegisterNeo4j(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,Neo4j.Driver.IAuthToken,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Registers module's dependencies.
            </summary>
            <param name="services">The services.</param>
            <param name="healthBuilder">The health builder.</param>
            <param name="authToken">The authentication token.</param>
            <param name="envVarPrefix">The environment variable prefix.</param>
            <param name="">The .</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.N4jHealth">
            <summary>
            REDIS health check
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.N4jHealth.#ctor(Neo4j.Driver.IDriver,Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.DependencyInjection.N4jHealth})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="driver">The driver.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.N4jHealth.Microsoft#Extensions#Diagnostics#HealthChecks#IHealthCheck#CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            Runs the health check, returning the status of the component being checked.
            </summary>
            <param name="context">A context object associated with the current execution.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the health check.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that completes when the health check has finished, yielding the status of the component being checked.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB">
            <summary>
            Neo4j graphDb abstraction
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.#ctor(Weknow.GraphDbClient.Neo4jProvider.N4jSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB" /> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.Weknow#GraphDbClient#Abstraction#IGraphDB#RunAsync(Weknow.GraphDbCommands.CypherCommand,Weknow.GraphDbCommands.CypherParameters)">
            <summary>
            Executes Cypher
            </summary>
            <param name="cypherCommand">The cypher command.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            Response factory
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse">
            <summary>
            GraphDB response abstraction
            </summary>
            <seealso cref="T:Weknow.GraphDbClient.Abstraction.IGraphDBResponse" />
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.#ctor(Neo4j.Driver.IResultCursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.GetOrFetchAsync(System.Int32)">
            <summary>
            Get from cache or Fetch.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.Weknow#GraphDbClient#Abstraction#IGraphDBResponse#GetAsync``1">
            <summary>
            Gets the first result set as T
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            the first result
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <example><![CDATA[
            MATCH (p:Person) RETURN p
            var person = results.Get<Person>();
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.Weknow#GraphDbClient#Abstraction#IGraphDBResponse#GetAsync``1(System.String,System.String)">
            <summary>
            Cast result set as T by a key.
            </summary>
            <typeparam name="T">The type of the first result.</typeparam>
            <param name="key">The first result's key.</param>
            <param name="property">The property.</param>
            <returns>
            Results by keys
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <example><![CDATA[
            MATCH (p:Person)-[:AT]->(c:Company) RETURN p
            var person = results.Get<Person>("p");
            var company = results.Get<Company>("c");
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.Weknow#GraphDbClient#Abstraction#IGraphDBResponse#GetRangeAsync``1">
            <summary>
            Gets the first result set
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            the first result
            </returns>
            <example><![CDATA[
            MATCH (p:Person) RETURN p
            var person = results.Get<Person>();
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.Weknow#GraphDbClient#Abstraction#IGraphDBResponse#GetAsync``1(System.Func{Weknow.GraphDbClient.Abstraction.IGraphDBRecord,``0})">
            <summary>
            Gets the first result
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <returns>
            the first result
            </returns>
            <example><![CDATA[
            MATCH (p:Person) RETURN p
            var person = results.Get<Person>();
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.Weknow#GraphDbClient#Abstraction#IGraphDBResponse#GetRangeAsync``1(System.Func{Weknow.GraphDbClient.Abstraction.IGraphDBRecord,``0})">
            <summary>
            Gets the first result set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <returns>
            the first result
            </returns>
            <example><![CDATA[
            MATCH (p:Person) RETURN p
            var person = results.Get<Person>();
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.Weknow#GraphDbClient#Abstraction#IGraphDBResponse#GetRangeAsync``1(System.String,System.String)">
            <summary>
            Gets result set by a key.
            </summary>
            <typeparam name="T">The type of the first result.</typeparam>
            <param name="key">The first result's key.</param>
            <param name="property">The property.</param>
            <returns>
            Results by keys
            </returns>
            <example><![CDATA[
            MATCH (p:Person)-[:AT]->(c:Company) RETURN p, c
            var person = results.Get<Person>("p");
            var company = results.Get<Company>("c");
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.Mapper``1(Neo4j.Driver.IRecord)">
            <summary>
            Mappers a record.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.Mapper``1(Neo4j.Driver.IRecord,System.String)">
            <summary>
            Mappers a record segment (key).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.GetFullName(System.String,System.String)">
            <summary>
            Gets the full name.
            </summary>
            <param name="key">The key.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.ConvertTo``1(Neo4j.Driver.IRecord,System.String,System.String)">
            <summary>
            Mappers by key and property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <param name="key">The key.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.ConvertTo``1(Neo4j.Driver.IRecord,System.String)">
            <summary>
            Mappers by key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.ConvertTo``1(System.Object)">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="T:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDB.GraphDBResponse.GraphDbRecord">
            <summary>
            Handle a single record mapping
            </summary>
            <seealso cref="T:Weknow.GraphDbClient.Abstraction.IGraphDBRecord" />
        </member>
        <member name="T:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDBExtensions">
            <summary>
            Neo4j graphDb abstraction
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDBExtensions.TryGetValue``1(Neo4j.Driver.IRecord,System.String,``0@)">
            <summary>
            Tries to get value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <param name="identifier">The identifier.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jGraphDBExtensions.TryGetValue``1(Neo4j.Driver.IRecord,``0@)">
            <summary>
            Tries to get the first record set's value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.GraphDbClient.Neo4jProvider.N4jProvider">
            <summary>
            Neo4j provider abstraction
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jProvider.CreateDriver(System.IServiceProvider,Neo4j.Driver.IAuthToken,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates the driver.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="authToken">The authentication token.</param>
            <param name="envVarPrefix">The environment variable prefix.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">NEO4J_URL
            or
            NEO4J_PASS</exception>
        </member>
        <member name="T:Weknow.GraphDbClient.Neo4jProvider.N4jSession">
            <summary>
            Neo4j graphDb abstraction
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jSession.#ctor(Neo4j.Driver.IDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Weknow.GraphDbClient.Neo4jProvider.N4jSession"/> class.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="P:Weknow.GraphDbClient.Neo4jProvider.N4jSession.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jSession.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Weknow.GraphDbClient.Neo4jProvider.N4jSession"/> class.
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Neo4jProvider.N4jSession.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
    </members>
</doc>
