<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.GraphDbClient.Abstraction</name>
    </assembly>
    <members>
        <member name="T:Weknow.GraphDbClient.Abstraction.IGraphDB">
            <summary>
            GraphDB abstraction
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Abstraction.IGraphDB.RunAsync(Weknow.GraphDbCommands.CypherCommand,Weknow.GraphDbCommands.CypherParameters)">
            <summary>
            Executes Cypher
            </summary>
            <param name="cypherCommand">The cypher command.</param>
            <param name="parameters">The parameters.</param>
            <returns>Response factory</returns>
        </member>
        <member name="M:Weknow.GraphDbClient.Abstraction.IGraphDBRecord.Get``1(System.String,System.String)">
            <summary>
            Cast result as T by a key.
            </summary>
            <typeparam name="T">The type of the first result.</typeparam>
            <param name="key">The first result's key.</param>
            <param name="property">The property.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Weknow.GraphDbClient.Abstraction.IGraphDBResponse">
            <summary>
            Graph Database response abstraction
            </summary>
        </member>
        <member name="M:Weknow.GraphDbClient.Abstraction.IGraphDBResponse.GetAsync``1">
            <summary>
            Gets the first result set as T
            </summary>
            <typeparam name="T"></typeparam>
            <returns>the first result</returns>
            <example>
            <![CDATA[
            MATCH (p:Person) RETURN p
            
            var person = results.Get<Person>();
            ]]>
            </example>
        </member>
        <member name="M:Weknow.GraphDbClient.Abstraction.IGraphDBResponse.GetAsync``1(System.Func{Weknow.GraphDbClient.Abstraction.IGraphDBRecord,``0})">
            <summary>
            Gets the first result set as T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <returns>
            the first result
            </returns>
            <example><![CDATA[
            MATCH (p:Person) RETURN p
            var person = results.Get<Person>();
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Abstraction.IGraphDBResponse.GetRangeAsync``1">
            <summary>
            Gets the first result set
            </summary>
            <typeparam name="T"></typeparam>
            <returns>the first result</returns>
            <example>
            <![CDATA[
            MATCH (p:Person) RETURN p
            
            var person = results.Get<Person>();
            ]]>
            </example>
        </member>
        <member name="M:Weknow.GraphDbClient.Abstraction.IGraphDBResponse.GetRangeAsync``1(System.Func{Weknow.GraphDbClient.Abstraction.IGraphDBRecord,``0})">
            <summary>
            Gets the first result set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <returns>
            the first result
            </returns>
            <example><![CDATA[
            MATCH (p:Person) RETURN p
            var person = results.Get<Person>();
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Abstraction.IGraphDBResponse.GetAsync``1(System.String,System.String)">
            <summary>
            Cast result set as T by a key.
            </summary>
            <typeparam name="T">The type of the first result.</typeparam>
            <param name="key">The first result's key.</param>
            <param name="property">The property.</param>
            <returns>
            Results by keys
            </returns>
            <example><![CDATA[
            MATCH (p:Person)-[:AT]->(c:Company) RETURN p
            var person = results.Get<Person>("p");
            var company = results.Get<Company>("c");
            ]]></example>
        </member>
        <member name="M:Weknow.GraphDbClient.Abstraction.IGraphDBResponse.GetRangeAsync``1(System.String,System.String)">
            <summary>
            Gets result set by a key.
            </summary>
            <typeparam name="T">The type of the first result.</typeparam>
            <param name="key">The first result's key.</param>
            <param name="property">The property.</param>
            <returns>
            Results by keys
            </returns>
            <example><![CDATA[
            MATCH (p:Person)-[:AT]->(c:Company) RETURN p, c
            var person = results.Get<Person>("p");
            var company = results.Get<Company>("c");
            ]]></example>
        </member>
        <member name="T:Weknow.GraphDbClient.Abstraction.IGraphExecutionSummary">
            <summary>
            The result summary of running a query. The result summary interface can be used 
            to investigate details about the result, like the type of query run, how many
            and which kinds of updates have been executed, and query plan and profiling information
             if available. The result summary is only available after all result records have
             been consumed. Keeping the result summary around does not influence the lifecycle
             of any associated session and/or transaction.
            </summary>
        </member>
        <member name="P:Weknow.GraphDbClient.Abstraction.IGraphExecutionSummary.Query">
            <summary>
            Gets query that has been executed
            </summary>
        </member>
        <member name="P:Weknow.GraphDbClient.Abstraction.IGraphExecutionSummary.ResultAvailableAfter">
            <summary>
            The time it took the server to make the result available for consumption.
            Default to -00:00:00.001 if the server version does not support this field in summary.
            </summary>
        </member>
    </members>
</doc>
